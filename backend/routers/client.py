from datetime import datetime, timezone
from typing import Any, List, Optional
import pytz

from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session, joinedload
from sqlalchemy import func, or_, and_

from auth import get_current_active_user, require_client
from database import get_db
from models import (
    User, Salon, Master, IndieMaster, Service, SalonBranch, Booking, 
    BookingStatus, ClientNote, ClientMasterNote, ClientSalonNote, UserRole
)
from schemas import (
    BookingFutureShort, BookingShort, Booking as BookingSchema, BookingPastShort,
    BookingCreate, BookingUpdate, ClientMasterNoteCreate, ClientMasterNoteUpdate, ClientMasterNoteOut,
    ClientSalonNoteCreate, ClientSalonNoteUpdate, ClientSalonNoteOut,
    ClientNoteCreate, ClientNoteUpdate, ClientNoteResponse
)
from services.scheduling import get_available_slots

router = APIRouter(
    prefix="/client/bookings",
    tags=["client_bookings"],
    dependencies=[Depends(require_client)],
)

profile_router = APIRouter(
    prefix="/client",
    tags=["client"],
    dependencies=[Depends(require_client)],
)


def get_master_timezone(booking: Booking) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –º–∞—Å—Ç–µ—Ä–∞ –∏–ª–∏ —Å–∞–ª–æ–Ω–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏
    """
    if booking.indie_master:
        return getattr(booking.indie_master, 'timezone', 'Europe/Moscow')
    elif booking.master:
        return getattr(booking.master, 'timezone', 'Europe/Moscow')
    elif booking.salon:
        return getattr(booking.salon, 'timezone', 'Europe/Moscow')
    else:
        return 'Europe/Moscow'


def get_current_time_in_timezone(timezone_str: str) -> datetime:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ
    """
    tz = pytz.timezone(timezone_str)
    return datetime.now(tz)


@router.get("/", response_model=List[BookingFutureShort])
def get_future_bookings(
    db: Session = Depends(get_db), current_user: User = Depends(get_current_active_user), client_id: int = None
) -> Any:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –±—É–¥—É—â–∏—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –∫–ª–∏–µ–Ω—Ç–∞.
    –ú–æ–∂–Ω–æ —è–≤–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å client_id (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Ü–µ–ª–µ–π), –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.
    """
    _client_id = client_id if client_id is not None else current_user.id
    print(f"üîç –û–¢–õ–ê–î–ö–ê get_future_bookings: client_id={_client_id}, current_user.id={current_user.id}")
    
    bookings = (
        db.query(Booking)
        .options(
            joinedload(Booking.salon),
            joinedload(Booking.master).joinedload(Master.user),
            joinedload(Booking.indie_master).joinedload(IndieMaster.user),
            joinedload(Booking.service),
            joinedload(Booking.branch)
        )
        .filter(
            Booking.client_id == _client_id,
            Booking.status != BookingStatus.CANCELLED,
        )
        .order_by(Booking.start_time.asc())
        .limit(5)
        .all()
    )
    
    print(f"üîç –û–¢–õ–ê–î–ö–ê: –ù–∞–π–¥–µ–Ω–æ {len(bookings)} –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ")
    
    result = []
    for b in bookings:
        print(f"üîç –û–¢–õ–ê–î–ö–ê: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø–∏—Å—å {b.id}: start_time={b.start_time}, status={b.status}")
        
        # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è —ç—Ç–æ–π –∑–∞–ø–∏—Å–∏
        master_timezone = get_master_timezone(b)
        current_time_in_master_tz = get_current_time_in_timezone(master_timezone)
        
        print(f"üîç –û–¢–õ–ê–î–ö–ê: –ú–∞—Å—Ç–µ—Ä timezone={master_timezone}, —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ timezone={current_time_in_master_tz}")
        
        # –ü—Ä–∏–≤–æ–¥–∏–º start_time –∫ —á–∞—Å–æ–≤–æ–º—É –ø–æ—è—Å—É –º–∞—Å—Ç–µ—Ä–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        if b.start_time and b.start_time.tzinfo is None:
            # –ï—Å–ª–∏ start_time –Ω–µ –∏–º–µ–µ—Ç —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —ç—Ç–æ UTC
            start_time_in_master_tz = pytz.UTC.localize(b.start_time).astimezone(pytz.timezone(master_timezone))
        else:
            start_time_in_master_tz = b.start_time.astimezone(pytz.timezone(master_timezone))
        
        print(f"üîç –û–¢–õ–ê–î–ö–ê: start_time –≤ timezone –º–∞—Å—Ç–µ—Ä–∞={start_time_in_master_tz}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø–∏—Å—å –±—É–¥—É—â–µ–π –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ –º–∞—Å—Ç–µ—Ä–∞
        if start_time_in_master_tz <= current_time_in_master_tz:
            print(f"üîç –û–¢–õ–ê–î–ö–ê: –ó–∞–ø–∏—Å—å {b.id} –ü–†–û–ü–£–©–ï–ù–ê (—É–∂–µ –ø—Ä–æ—à–ª–∞)")
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å–∏, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –ø—Ä–æ—à–ª–∏ –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ –º–∞—Å—Ç–µ—Ä–∞
        
        print(f"üîç –û–¢–õ–ê–î–ö–ê: –ó–∞–ø–∏—Å—å {b.id} –î–û–ë–ê–í–õ–ï–ù–ê (–±—É–¥—É—â–∞—è)")
        
        salon_name = b.salon.name if b.salon else "-"
        master_name = "-"
        if b.master and b.master.user:
            master_name = b.master.user.full_name
        elif b.indie_master and b.indie_master.user:
            master_name = b.indie_master.user.full_name
        service_name = b.service.name if b.service else "-"
        price = b.service.price if b.service else 0
        duration = b.service.duration if b.service else 0
        date = b.start_time
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∏–ª–∏–∞–ª–µ
        branch_name = b.branch.name if b.branch else None
        branch_address = b.branch.address if b.branch else None
        
        result.append(BookingFutureShort(
            id=b.id,
            salon_name=salon_name,
            master_name=master_name,
            service_name=service_name,
            price=price,
            duration=duration,
            date=date,
            start_time=b.start_time,
            end_time=b.end_time,
            status=b.status.value,
            branch_name=branch_name,
            branch_address=branch_address,
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è
            master_id=b.master_id,
            indie_master_id=b.indie_master_id,
            service_id=b.service_id,
            salon_id=b.salon_id,
            branch_id=b.branch_id
        ))
    
    print(f"üîç –û–¢–õ–ê–î–ö–ê: –í–æ–∑–≤—Ä–∞—â–∞–µ–º {len(result)} –±—É–¥—É—â–∏—Ö –∑–∞–ø–∏—Å–µ–π")
    return result


@router.get("/past", response_model=List[BookingPastShort])
def get_past_bookings(
    db: Session = Depends(get_db), current_user: User = Depends(get_current_active_user), client_id: int = None
) -> Any:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—à–µ–¥—à–∏—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –∫–ª–∏–µ–Ω—Ç–∞.
    –ú–æ–∂–Ω–æ —è–≤–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å client_id (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Ü–µ–ª–µ–π), –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.
    """
    _client_id = client_id if client_id is not None else current_user.id
    print(f"üîç –û–¢–õ–ê–î–ö–ê get_past_bookings: client_id={_client_id}, current_user.id={current_user.id}")
    
    bookings = (
        db.query(Booking)
        .options(
            joinedload(Booking.salon),
            joinedload(Booking.master).joinedload(Master.user),
            joinedload(Booking.indie_master).joinedload(IndieMaster.user),
            joinedload(Booking.service),
            joinedload(Booking.branch)
        )
        .filter(
            Booking.client_id == _client_id,
            Booking.status != BookingStatus.CANCELLED,
        )
        .order_by(Booking.start_time.desc())
        .limit(5)
        .all()
    )
    
    print(f"üîç –û–¢–õ–ê–î–ö–ê get_past_bookings: –ù–∞–π–¥–µ–Ω–æ {len(bookings)} –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ")
    
    result = []
    for b in bookings:
        print(f"üîç –û–¢–õ–ê–î–ö–ê get_past_bookings: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø–∏—Å—å {b.id}: start_time={b.start_time}, status={b.status}")
        
        # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è —ç—Ç–æ–π –∑–∞–ø–∏—Å–∏
        master_timezone = get_master_timezone(b)
        current_time_in_master_tz = get_current_time_in_timezone(master_timezone)
        
        print(f"üîç –û–¢–õ–ê–î–ö–ê get_past_bookings: –ú–∞—Å—Ç–µ—Ä timezone={master_timezone}, —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ timezone={current_time_in_master_tz}")
        
        # –ü—Ä–∏–≤–æ–¥–∏–º start_time –∫ —á–∞—Å–æ–≤–æ–º—É –ø–æ—è—Å—É –º–∞—Å—Ç–µ—Ä–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        if b.start_time and b.start_time.tzinfo is None:
            # –ï—Å–ª–∏ start_time –Ω–µ –∏–º–µ–µ—Ç —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —ç—Ç–æ UTC
            start_time_in_master_tz = pytz.UTC.localize(b.start_time).astimezone(pytz.timezone(master_timezone))
        else:
            start_time_in_master_tz = b.start_time.astimezone(pytz.timezone(master_timezone))
        
        print(f"üîç –û–¢–õ–ê–î–ö–ê get_past_bookings: start_time –≤ timezone –º–∞—Å—Ç–µ—Ä–∞={start_time_in_master_tz}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø–∏—Å—å –ø—Ä–æ—à–µ–¥—à–µ–π –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ –º–∞—Å—Ç–µ—Ä–∞
        if start_time_in_master_tz > current_time_in_master_tz:
            print(f"üîç –û–¢–õ–ê–î–ö–ê get_past_bookings: –ó–∞–ø–∏—Å—å {b.id} –ü–†–û–ü–£–©–ï–ù–ê (–µ—â–µ –Ω–µ –ø—Ä–æ—à–ª–∞)")
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å–∏, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—É–ø–∏–ª–∏ –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ –º–∞—Å—Ç–µ—Ä–∞
        
        print(f"üîç –û–¢–õ–ê–î–ö–ê get_past_bookings: –ó–∞–ø–∏—Å—å {b.id} –î–û–ë–ê–í–õ–ï–ù–ê (–ø—Ä–æ—à–µ–¥—à–∞—è)")
        
        salon_name = b.salon.name if b.salon else "-"
        master_name = "-"
        if b.master and b.master.user:
            master_name = b.master.user.full_name
        elif b.indie_master and b.indie_master.user:
            master_name = b.indie_master.user.full_name
        service_name = b.service.name if b.service else "-"
        price = b.service.price if b.service else 0
        duration = b.service.duration if b.service else 0
        date = b.start_time
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∏–ª–∏–∞–ª–µ
        branch_name = b.branch.name if b.branch else None
        branch_address = b.branch.address if b.branch else None
        
        result.append(BookingPastShort(
            id=b.id,
            salon_name=salon_name,
            master_name=master_name,
            service_name=service_name,
            price=price,
            duration=duration,
            date=date,
            start_time=b.start_time,
            end_time=b.end_time,
            status=b.status.value,
            branch_name=branch_name,
            branch_address=branch_address,
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è
            master_id=b.master_id,
            indie_master_id=b.indie_master_id,
            service_id=b.service_id,
            salon_id=b.salon_id,
            branch_id=b.branch_id
        ))
    
    print(f"üîç –û–¢–õ–ê–î–ö–ê get_past_bookings: –í–æ–∑–≤—Ä–∞—â–∞–µ–º {len(result)} –ø—Ä–æ—à–µ–¥—à–∏—Ö –∑–∞–ø–∏—Å–µ–π")
    return result


@router.get("/{booking_id}/available-slots")
def get_available_slots_for_booking(
    booking_id: int,
    date: str,  # –§–æ—Ä–º–∞—Ç: YYYY-MM-DD
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_active_user)
) -> Any:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø–∏—Å–∏.
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å
        booking = (
            db.query(Booking)
            .filter(Booking.id == booking_id, Booking.client_id == current_user.id)
            .first()
        )
        
        if not booking:
            raise HTTPException(status_code=404, detail="–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        if not booking.service:
            raise HTTPException(status_code=400, detail="–£ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç —É—Å–ª—É–≥–∏")
        
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
        try:
            target_date = datetime.strptime(date, '%Y-%m-%d')
        except ValueError:
            raise HTTPException(status_code=400, detail="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∏ –µ–≥–æ ID
        owner_type = None
        owner_id = None
        branch_id = None
        
        if booking.master:
            owner_type = OwnerType.MASTER
            owner_id = booking.master.id
            branch_id = booking.branch_id if booking.branch else None
        elif booking.indie_master:
            owner_type = OwnerType.INDIE_MASTER
            owner_id = booking.indie_master.id
        elif booking.salon:
            owner_type = OwnerType.SALON
            owner_id = booking.salon.id
            branch_id = booking.branch_id if booking.branch else None
        else:
            raise HTTPException(status_code=400, detail="–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ —É—Å–ª—É–≥–∏")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã
        available_slots = get_available_slots(
            db=db,
            owner_type=owner_type,
            owner_id=owner_id,
            date=target_date,
            service_duration=booking.service.duration,
            branch_id=branch_id
        )
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª–æ—Ç—ã, –∏—Å–∫–ª—é—á–∞—è —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏
        filtered_slots = []
        for slot in available_slots:
            slot_start = slot['start_time']
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ slot_start —ç—Ç–æ datetime –æ–±—ä–µ–∫—Ç
            if isinstance(slot_start, datetime):
                # –ò—Å–∫–ª—é—á–∞–µ–º —Å–ª–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º –∑–∞–ø–∏—Å–∏
                if abs((slot_start - booking.start_time).total_seconds()) > 300:  # 5 –º–∏–Ω—É—Ç —Ä–∞–∑–Ω–∏—Ü—ã
                    filtered_slots.append({
                        'start_time': slot_start.isoformat(),
                        'end_time': slot['end_time'].isoformat(),
                        'formatted_time': slot_start.strftime('%H:%M')
                    })
            else:
                # –ï—Å–ª–∏ slot_start —É–∂–µ —Å—Ç—Ä–æ–∫–∞, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –µ—ë –≤ datetime –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                try:
                    slot_start_dt = datetime.fromisoformat(slot_start.replace('Z', '+00:00'))
                    if abs((slot_start_dt - booking.start_time).total_seconds()) > 300:  # 5 –º–∏–Ω—É—Ç —Ä–∞–∑–Ω–∏—Ü—ã
                        filtered_slots.append({
                            'start_time': slot_start,
                            'end_time': slot['end_time'],
                            'formatted_time': slot_start_dt.strftime('%H:%M')
                        })
                except:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª–æ—Ç
                    continue
        
        return {
            'booking_id': booking_id,
            'service_name': booking.service.name,
            'service_duration': booking.service.duration,
            'current_start_time': booking.start_time.isoformat(),
            'available_slots': filtered_slots
        }
        
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤: {str(e)}"
        )


@router.post("/", response_model=BookingSchema)
def create_booking(
    booking_in: BookingCreate,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_active_user),
) -> Any:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–∏
    existing_booking = (
        db.query(Booking)
        .filter(
            Booking.start_time == booking_in.start_time,
            Booking.status != BookingStatus.CANCELLED,
            (
                (Booking.master_id == booking_in.master_id)
                | (Booking.indie_master_id == booking_in.indie_master_id)
                | (Booking.salon_id == booking_in.salon_id)
            ),
        )
        .first()
    )

    if existing_booking:
        raise HTTPException(status_code=400, detail="This time slot is already booked")

    booking = Booking(**booking_in.dict(), client_id=current_user.id)
    db.add(booking)
    db.commit()
    db.refresh(booking)
    return booking


@router.put("/{booking_id}", response_model=BookingSchema)
def update_booking(
    booking_id: int,
    booking_in: BookingUpdate,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_active_user),
) -> Any:
    """
    –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.
    """
    booking = (
        db.query(Booking)
        .filter(Booking.id == booking_id, Booking.client_id == current_user.id)
        .first()
    )

    if not booking:
        raise HTTPException(status_code=404, detail="Booking not found")

    if booking.status == BookingStatus.CANCELLED:
        raise HTTPException(status_code=400, detail="Cannot update cancelled booking")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –Ω–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    if hasattr(booking_in, 'start_time') and booking_in.start_time:
        # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–ø–∏—Å—å –∏–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏
        existing_booking = (
            db.query(Booking)
            .filter(
                Booking.start_time == booking_in.start_time,
                Booking.status != BookingStatus.CANCELLED,
                Booking.id != booking_id,
                (
                    (Booking.master_id == booking.master_id)
                    | (Booking.indie_master_id == booking.indie_master_id)
                    | (Booking.salon_id == booking.salon_id)
                ),
            )
            .first()
        )

        if existing_booking:
            raise HTTPException(status_code=400, detail="This time slot is already booked")

    for field, value in booking_in.dict(exclude_unset=True).items():
        setattr(booking, field, value)

    db.commit()
    db.refresh(booking)
    return booking


@router.delete("/{booking_id}", response_model=BookingSchema)
def cancel_booking(
    booking_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_active_user),
) -> Any:
    """
    –û—Ç–º–µ–Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.
    """
    booking = (
        db.query(Booking)
        .filter(Booking.id == booking_id, Booking.client_id == current_user.id)
        .first()
    )

    if not booking:
        raise HTTPException(status_code=404, detail="Booking not found")

    if booking.status == BookingStatus.CANCELLED:
        raise HTTPException(status_code=400, detail="Booking is already cancelled")

    booking.status = BookingStatus.CANCELLED
    db.commit()
    db.refresh(booking)
    return booking


# @profile_router.get("/favorites")
# def get_favorites(db: Session = Depends(get_db), current_user: User = Depends(get_current_active_user)):
#     """
#     –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.
#     """
#     try:
#         fav = db.query(ClientFavorite).filter(ClientFavorite.client_id == current_user.id).first()
#         if not fav:
#             return []
#         return fav.favorites
#     except Exception as e:
#         raise HTTPException(
#             status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
#             detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: {str(e)}"
#         )


# @profile_router.post("/favorites", response_model=FavoriteResponse)
# def add_favorite(
#     favorite_data: ClientFavoriteCreate,
#     db: Session = Depends(get_db),
#     current_user: User = Depends(get_current_active_user)
# ) -> Any:
#     """
#     –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.
#     """
#     try:
#         # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –¥–ª—è —ç—Ç–æ–π —É—Å–ª—É–≥–∏
#         existing_favorite = (
#             db.query(ClientFavorite)
#             .filter(
#                 ClientFavorite.client_id == current_user.id,
#                 ClientFavorite.service_id == favorite_data.service_id
#             )
#             .first()
#         )
#         
#         if existing_favorite:
#             raise HTTPException(status_code=400, detail="Service already in favorites")
#         
#         new_favorite = ClientFavorite(
#             client_id=current_user.id,
#             service_id=favorite_data.service_id
#         )
#         
#         db.add(new_favorite)
#         db.commit()
#         db.refresh(new_favorite)
#         
#         return FavoriteResponse(
#             id=new_favorite.id,
#             client_id=new_favorite.client_id,
#             service_id=new_favorite.service_id,
#             created_at=new_favorite.created_at
#         )
#         
#     except Exception as e:
#         db.rollback()
#         raise HTTPException(
#             status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
#             detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ: {str(e)}"
#         )


# @profile_router.delete("/favorites/{favorite_id}", response_model=FavoriteResponse)
# def delete_favorite(
#     favorite_id: int,
#     db: Session = Depends(get_db),
#     current_user: User = Depends(get_current_active_user)
#     -> Any:
#     """
#     –£–¥–∞–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∏ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ.
#     """
#     try:
#         favorite = (
#             db.query(ClientFavorite)
#             .filter(
#                 ClientFavorite.id == favorite_id,
#                 ClientFavorite.client_id == current_user.id
#             )
#             .first()
#         )
#         
#         if not favorite:
#             raise HTTPException(status_code=404, detail="Favorite not found")
#         
#         db.delete(favorite)
#         db.commit()
#         
#         return FavoriteResponse(
#             id=favorite.id,
#             client_id=favorite.client_id,
#             service_id=favorite.service_id,
#             created_at=favorite.created_at
#         )
#         
#     except Exception as e:
#         db.rollback()
#         raise HTTPException(
#             status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
#             detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: {str(e)}"
#         )


# –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è –∫–ª–∏–µ–Ω—Ç–∞
@profile_router.get("/profile")
def get_client_profile(
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_active_user)
) -> Any:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∫–ª–∏–µ–Ω—Ç–∞
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
        client = db.query(User).filter(User.id == current_user.id).first()
        
        if not client:
            raise HTTPException(status_code=404, detail="–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        return {
            "id": client.id,
            "name": client.full_name,
            "email": client.email,
            "phone": client.phone,
            "birth_date": client.birth_date,
            "created_at": client.created_at
        }
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        raise HTTPException(status_code=500, detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")


@profile_router.put("/profile")
def update_client_profile(
    profile_data: dict,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_active_user)
) -> Any:
    """
    –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∫–ª–∏–µ–Ω—Ç–∞
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        client = db.query(User).filter(User.id == current_user.id).first()
        
        if not client:
            raise HTTPException(status_code=404, detail="–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø–æ–ª—è
        if "email" in profile_data:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ email —É–Ω–∏–∫–∞–ª–µ–Ω
            existing_user = db.query(User).filter(
                User.email == profile_data["email"],
                User.id != current_user.id
            ).first()
            if existing_user:
                raise HTTPException(status_code=400, detail="Email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")
            client.email = profile_data["email"]
        
        if "phone" in profile_data:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–ª–µ—Ñ–æ–Ω —É–Ω–∏–∫–∞–ª–µ–Ω
            existing_user = db.query(User).filter(
                User.phone == profile_data["phone"],
                User.id != current_user.id
            ).first()
            if existing_user:
                raise HTTPException(status_code=400, detail="–¢–µ–ª–µ—Ñ–æ–Ω —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")
            client.phone = profile_data["phone"]
        
        db.commit()
        
        return {"message": "–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω"}
    except HTTPException:
        raise
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        db.rollback()
        raise HTTPException(status_code=500, detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")


@profile_router.put("/change-password")
def change_client_password(
    password_data: dict,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_active_user)
) -> Any:
    """
    –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è –∫–ª–∏–µ–Ω—Ç–∞
    """
    try:
        from auth import verify_password, get_password_hash
        
        current_password = password_data.get("current_password")
        new_password = password_data.get("new_password")
        
        if not current_password or not new_password:
            raise HTTPException(status_code=400, detail="–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –∏ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å
        if not verify_password(current_password, current_user.hashed_password):
            raise HTTPException(status_code=400, detail="–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å")
        
        # –•–µ—à–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
        hashed_new_password = get_password_hash(new_password)
        current_user.hashed_password = hashed_new_password
        
        db.commit()
        
        return {"message": "–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω"}
    except HTTPException:
        raise
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–∞—Ä–æ–ª—è –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        db.rollback()
        raise HTTPException(status_code=500, detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")


@profile_router.delete("/account")
def delete_client_account(
    password_data: dict,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_active_user)
) -> Any:
    """
    –£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞
    """
    try:
        from auth import verify_password
        
        password = password_data.get("password")
        
        if not password:
            raise HTTPException(status_code=400, detail="–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ø–∞—Ä–æ–ª—å")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
        if not verify_password(password, current_user.hashed_password):
            raise HTTPException(status_code=400, detail="–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å")
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞
        db.query(Booking).filter(Booking.client_id == current_user.id).delete()
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db.delete(current_user)
        db.commit()
        
        return {"message": "–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω"}
    except HTTPException:
        raise
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        db.rollback()
        raise HTTPException(status_code=500, detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")


# API –¥–ª—è –∑–∞–º–µ—Ç–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∫ –º–∞—Å—Ç–µ—Ä–∞–º
@profile_router.get("/master-notes", response_model=List[ClientMasterNoteOut])
def get_client_master_notes(
    current_user: User = Depends(get_current_active_user),
    db: Session = Depends(get_db)
) -> Any:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–º–µ—Ç–æ–∫ –∫–ª–∏–µ–Ω—Ç–∞ –∫ –º–∞—Å—Ç–µ—Ä–∞–º.
    """
    if current_user.role != UserRole.CLIENT:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤"
        )
    
    notes = (
        db.query(ClientMasterNote)
        .options(
            joinedload(ClientMasterNote.master).joinedload(Master.user),
            joinedload(ClientMasterNote.salon)
        )
        .filter(ClientMasterNote.client_id == current_user.id)
        .order_by(ClientMasterNote.updated_at.desc())
        .all()
    )
    
    result = []
    for note in notes:
        result.append(ClientMasterNoteOut(
            id=note.id,
            master_id=note.master_id,
            salon_id=note.salon_id,
            note=note.note,
            created_at=note.created_at,
            updated_at=note.updated_at,
            master_name=note.master.user.full_name if note.master and note.master.user else None,
            salon_name=note.salon.name if note.salon else None
        ))
    
    return result


@profile_router.get("/master-notes/{master_id}", response_model=ClientMasterNoteOut)
def get_client_master_note(
    master_id: int,
    current_user: User = Depends(get_current_active_user),
    db: Session = Depends(get_db)
) -> Any:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –º–∞—Å—Ç–µ—Ä—É.
    """
    if current_user.role != UserRole.CLIENT:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤"
        )
    
    note = (
        db.query(ClientMasterNote)
        .options(
            joinedload(ClientMasterNote.master).joinedload(Master.user),
            joinedload(ClientMasterNote.salon)
        )
        .filter(
            ClientMasterNote.client_id == current_user.id,
            ClientMasterNote.master_id == master_id
        )
        .first()
    )
    
    if not note:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        )
    
    return ClientMasterNoteOut(
        id=note.id,
        master_id=note.master_id,
        salon_id=note.salon_id,
        note=note.note,
        created_at=note.created_at,
        updated_at=note.updated_at,
        master_name=note.master.user.full_name if note.master and note.master.user else None,
        salon_name=note.salon.name if note.salon else None
    )


@profile_router.post("/master-notes", response_model=ClientMasterNoteOut)
def create_client_master_note(
    note_data: ClientMasterNoteCreate,
    current_user: User = Depends(get_current_active_user),
    db: Session = Depends(get_db)
) -> Any:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞ –∫ –º–∞—Å—Ç–µ—Ä—É.
    """
    if current_user.role != UserRole.CLIENT:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤"
        )
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∑–∞–º–µ—Ç–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞
        existing_note = (
            db.query(ClientMasterNote)
            .filter(
                ClientMasterNote.client_id == current_user.id,
                ClientMasterNote.master_id == note_data.master_id,
                ClientMasterNote.salon_id == note_data.salon_id
            )
            .first()
        )
        
        if existing_note:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–º–µ—Ç–∫—É
            existing_note.note = note_data.note
            existing_note.updated_at = datetime.now(timezone.utc)
            db.commit()
            db.refresh(existing_note)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∑–∞–º–µ—Ç–∫—É —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            note = (
                db.query(ClientMasterNote)
                .options(
                    joinedload(ClientMasterNote.master).joinedload(Master.user),
                    joinedload(ClientMasterNote.salon)
                )
                .filter(ClientMasterNote.id == existing_note.id)
                .first()
            )
            
            return ClientMasterNoteOut(
                id=note.id,
                master_id=note.master_id,
                salon_id=note.salon_id,
                note=note.note,
                created_at=note.created_at,
                updated_at=note.updated_at,
                master_name=note.master.user.full_name if note.master and note.master.user else None,
                salon_name=note.salon.name if note.salon else None
            )
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É
            new_note = ClientMasterNote(
                client_id=current_user.id,
                master_id=note_data.master_id,
                salon_id=note_data.salon_id,
                note=note_data.note
            )
            
            db.add(new_note)
            db.commit()
            db.refresh(new_note)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            note = (
                db.query(ClientMasterNote)
                .options(
                    joinedload(ClientMasterNote.master).joinedload(Master.user),
                    joinedload(ClientMasterNote.salon)
                )
                .filter(ClientMasterNote.id == new_note.id)
                .first()
            )
            
            return ClientMasterNoteOut(
                id=note.id,
                master_id=note.master_id,
                salon_id=note.salon_id,
                note=note.note,
                created_at=note.created_at,
                updated_at=note.updated_at,
                master_name=note.master.user.full_name if note.master and note.master.user else None,
                salon_name=note.salon.name if note.salon else None
            )
            
    except Exception as e:
        db.rollback()
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏: {str(e)}"
        )


@profile_router.delete("/master-notes/{master_id}")
def delete_client_master_note(
    master_id: int,
    current_user: User = Depends(get_current_active_user),
    db: Session = Depends(get_db)
) -> Any:
    """
    –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞ –∫ –º–∞—Å—Ç–µ—Ä—É.
    """
    if current_user.role != UserRole.CLIENT:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤"
        )
    
    try:
        note = (
            db.query(ClientMasterNote)
            .filter(
                ClientMasterNote.client_id == current_user.id,
                ClientMasterNote.master_id == master_id
            )
            .first()
        )
        
        if not note:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="–ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            )
        
        db.delete(note)
        db.commit()
        
        return {"message": "–ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞"}
        
    except Exception as e:
        db.rollback()
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏: {str(e)}"
        )


# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞
@profile_router.get("/dashboard/stats")
def get_client_dashboard_stats(
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_active_user)
) -> Any:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞.
    """
    try:
        print(f"üîç –û–¢–õ–ê–î–ö–ê get_client_dashboard_stats: client_id={current_user.id}")
        
        # –ü—Ä–æ—à–µ–¥—à–∏–µ –∑–∞–ø–∏—Å–∏ - –∑–∞–ø–∏—Å–∏, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –ø—Ä–æ—à–ª–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
        past_bookings = (
            db.query(Booking)
            .filter(
                Booking.client_id == current_user.id,
                Booking.status != BookingStatus.CANCELLED
            )
            .all()
        )
        
        print(f"üîç –û–¢–õ–ê–î–ö–ê: –ù–∞–π–¥–µ–Ω–æ {len(past_bookings)} –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞")
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—à–µ–¥—à–∏–µ –∑–∞–ø–∏—Å–∏ —Å —É—á–µ—Ç–æ–º timezone –º–∞—Å—Ç–µ—Ä–∞
        past_bookings_count = 0
        for booking in past_bookings:
            master_timezone = get_master_timezone(booking)
            current_time_in_master_tz = get_current_time_in_timezone(master_timezone)
            
            # –ü—Ä–∏–≤–æ–¥–∏–º start_time –∫ —á–∞—Å–æ–≤–æ–º—É –ø–æ—è—Å—É –º–∞—Å—Ç–µ—Ä–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            if booking.start_time and booking.start_time.tzinfo is None:
                # –ï—Å–ª–∏ start_time –Ω–µ –∏–º–µ–µ—Ç —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —ç—Ç–æ UTC
                start_time_in_master_tz = pytz.UTC.localize(booking.start_time).astimezone(pytz.timezone(master_timezone))
            else:
                start_time_in_master_tz = booking.start_time.astimezone(pytz.timezone(master_timezone))
            
            print(f"üîç –û–¢–õ–ê–î–ö–ê: –ó–∞–ø–∏—Å—å {booking.id}: start_time={booking.start_time}, timezone={master_timezone}, start_time_in_tz={start_time_in_master_tz}, current_time={current_time_in_master_tz}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø–∏—Å—å –ø—Ä–æ—à–µ–¥—à–µ–π –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ –º–∞—Å—Ç–µ—Ä–∞
            if start_time_in_master_tz <= current_time_in_master_tz:
                past_bookings_count += 1
                print(f"üîç –û–¢–õ–ê–î–ö–ê: –ó–∞–ø–∏—Å—å {booking.id} –î–û–ë–ê–í–õ–ï–ù–ê –∫ –ø—Ä–æ—à–µ–¥—à–∏–º")
            else:
                print(f"üîç –û–¢–õ–ê–î–ö–ê: –ó–∞–ø–∏—Å—å {booking.id} –ù–ï –¥–æ–±–∞–≤–ª–µ–Ω–∞ (–µ—â–µ –Ω–µ –ø—Ä–æ—à–ª–∞)")
        
        # –ë—É–¥—É—â–∏–µ –∑–∞–ø–∏—Å–∏ - –∑–∞–ø–∏—Å–∏, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –ø—Ä–æ—à–ª–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        future_bookings_count = len(past_bookings) - past_bookings_count
        
        print(f"üîç –û–¢–õ–ê–î–ö–ê: –ò—Ç–æ–≥–æ: –ø—Ä–æ—à–µ–¥—à–∏—Ö={past_bookings_count}, –±—É–¥—É—â–∏—Ö={future_bookings_count}")
        
        # –¢–æ–ø —Å–∞–ª–æ–Ω–æ–≤ –ø–æ —á–∞—Å—Ç–æ—Ç–µ –∑–∞–ø–∏—Å–∏
        top_salons = (
            db.query(
                Booking.salon_id,
                func.count(Booking.id).label('booking_count')
            )
            .filter(
                Booking.client_id == current_user.id,
                Booking.salon_id.isnot(None)
            )
            .group_by(Booking.salon_id)
            .order_by(func.count(Booking.id).desc())
            .limit(5)
            .all()
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Å–∞–ª–æ–Ω–æ–≤
        salon_names = {}
        for salon_id, _ in top_salons:
            salon = db.query(Salon).filter(Salon.id == salon_id).first()
            if salon:
                salon_names[salon_id] = salon.name
        
        top_salons_with_names = [
            {
                "salon_id": salon_id,
                "salon_name": salon_names.get(salon_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–∞–ª–æ–Ω"),
                "booking_count": count
            }
            for salon_id, count in top_salons
        ]
        
        # –¢–æ–ø –º–∞—Å—Ç–µ—Ä–æ–≤ (—Ç–æ–ª—å–∫–æ –∏–∑ —Å–∞–ª–æ–Ω–æ–≤)
        top_masters = (
            db.query(
                Booking.master_id,
                func.count(Booking.id).label('booking_count')
            )
            .filter(
                Booking.client_id == current_user.id,
                Booking.master_id.isnot(None)
            )
            .group_by(Booking.master_id)
            .order_by(func.count(Booking.id).desc())
            .limit(5)
            .all()
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ –º–∞—Å—Ç–µ—Ä–æ–≤
        master_names = {}
        for master_id, _ in top_masters:
            if master_id:
                master = db.query(Master).filter(Master.id == master_id).first()
                if master and master.user:
                    master_names[master_id] = master.user.full_name
        
        top_masters_with_names = [
            {
                "master_id": master_id,
                "master_name": master_names.get(master_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–∞—Å—Ç–µ—Ä"),
                "booking_count": count
            }
            for master_id, count in top_masters
        ]
        
        # –¢–æ–ø –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤
        top_indie_masters = (
            db.query(
                Booking.indie_master_id,
                func.count(Booking.id).label('booking_count')
            )
            .filter(
                Booking.client_id == current_user.id,
                Booking.indie_master_id.isnot(None)
            )
            .group_by(Booking.indie_master_id)
            .order_by(func.count(Booking.id).desc())
            .limit(5)
            .all()
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤
        indie_master_names = {}
        for indie_master_id, _ in top_indie_masters:
            if indie_master_id:
                indie_master = db.query(IndieMaster).filter(IndieMaster.id == indie_master_id).first()
                if indie_master and indie_master.user:
                    indie_master_names[indie_master_id] = indie_master.user.full_name
        
        top_indie_masters_with_names = [
            {
                "indie_master_id": indie_master_id,
                "indie_master_name": indie_master_names.get(indie_master_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–∞—Å—Ç–µ—Ä"),
                "booking_count": count
            }
            for indie_master_id, count in top_indie_masters
        ]
        
        return {
            "past_bookings": past_bookings_count,
            "future_bookings": future_bookings_count,
            "top_salons": top_salons_with_names,
            "top_masters": top_masters_with_names,
            "top_indie_masters": top_indie_masters_with_names
        }
        
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}"
        )


# –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–±—Ä–∞–Ω–Ω—ã–º
# @router.post("/favorites", response_model=FavoriteResponse)
# def add_to_favorites(
#     favorite_data: ClientFavoriteCreate,
#     db: Session = Depends(get_db),
#     current_user: User = Depends(get_current_active_user)
# ) -> Any:
#     """
#     –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.
#     """
#     try:
#         # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –¥–ª—è —ç—Ç–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
#         existing_favorite = None
#         
#         if favorite_data.salon_id:
#             existing_favorite = (
#                 db.query(ClientFavorite)
#                 .filter(
#                     ClientFavorite.client_id == current_user.id,
#                     ClientFavorite.favorite_type == 'salon',
#                     ClientFavorite.salon_id == favorite_data.salon_id
#                 )
#                 .first()
#             )
#         elif favorite_data.master_id:
#             existing_favorite = (
#                 db.query(ClientFavorite)
#                 .filter(
#                     ClientFavorite.client_id == current_user.id,
#                     ClientFavorite.favorite_type == 'master',
#                     ClientFavorite.master_id == favorite_data.master_id
#                 )
#                 .first()
#             )
#         elif favorite_data.indie_master_id:
#             existing_favorite = (
#                 db.query(ClientFavorite)
#                 .filter(
#                     ClientFavorite.client_id == current_user.id,
#                     ClientFavorite.favorite_type == 'indie_master',
#                     ClientFavorite.indie_master_id == favorite_data.indie_master_id
#                 )
#                 .first()
#             )
#         elif favorite_data.service_id:
#             existing_favorite = (
#                 db.query(ClientFavorite)
#                 .filter(
#                     ClientFavorite.client_id == current_user.id,
#                     ClientFavorite.favorite_type == 'service',
#                     ClientFavorite.service_id == favorite_data.service_id
#                 )
#                 .first()
#             )
#         
#         if existing_favorite:
#             raise HTTPException(status_code=400, detail="Item already in favorites")
#         
#         new_favorite = ClientFavorite(
#             client_id=current_user.id,
#             favorite_type=favorite_data.favorite_type,
#             salon_id=favorite_data.salon_id,
#             master_id=favorite_data.master_id,
#             indie_master_id=favorite_data.indie_master_id,
#             service_id=favorite_data.service_id
#         )
#         
#         db.add(new_favorite)
#         db.commit()
#         db.refresh(new_favorite)
#         
#         return {"message": "Item added to favorites successfully"}
#         
#     except Exception as e:
#         db.rollback()
#         raise HTTPException(
#             status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
#             detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ: {str(e)}"
#         )


@router.get("/indie-master/{master_id}/profile")
def get_indie_master_profile(
    master_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_active_user)
) -> Any:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å"
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–º –º–∞—Å—Ç–µ—Ä–µ
        indie_master = (
            db.query(IndieMaster)
            .options(joinedload(IndieMaster.user))
            .filter(IndieMaster.id == master_id)
            .first()
        )
        
        if not indie_master:
            raise HTTPException(status_code=404, detail="–ú–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        return {
            "id": indie_master.id,
            "name": indie_master.user.full_name if indie_master.user else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–∞—Å—Ç–µ—Ä",
            "domain": indie_master.domain,
            "city": indie_master.city,
            "timezone": indie_master.timezone
        }
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –º–∞—Å—Ç–µ—Ä–∞: {str(e)}"
        )


@router.get("/master/{master_id}/profile")
def get_master_profile(
    master_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_active_user)
) -> Any:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –º–∞—Å—Ç–µ—Ä–∞ –≤ —Å–∞–ª–æ–Ω–µ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å"
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Å—Ç–µ—Ä–µ –≤ —Å–∞–ª–æ–Ω–µ
        master = (
            db.query(Master)
            .options(joinedload(Master.user))
            .filter(Master.id == master_id)
            .first()
        )
        
        if not master:
            raise HTTPException(status_code=404, detail="–ú–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        return {
            "id": master.id,
            "name": master.user.full_name if master.user else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–∞—Å—Ç–µ—Ä",
            "bio": master.bio,
            "experience_years": master.experience_years
        }
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –º–∞—Å—Ç–µ—Ä–∞: {str(e)}"
        )


@router.get("/service/{service_id}/profile")
def get_service_profile(
    service_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_active_user)
) -> Any:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —É—Å–ª—É–≥–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å"
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ª—É–≥–µ
        service = (
            db.query(Service)
            .options(joinedload(Service.category))
            .filter(Service.id == service_id)
            .first()
        )
        
        if not service:
            raise HTTPException(status_code=404, detail="–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        return {
            "id": service.id,
            "name": service.name,
            "description": service.description,
            "price": service.price,
            "duration": service.duration,
            "category_id": service.category_id,
            "category_name": service.category.name if service.category else None
        }
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è —É—Å–ª—É–≥–∏: {str(e)}"
        )


# @router.delete("/favorites/{favorite_type}/{item_id}", response_model=FavoriteResponse)
# def remove_from_favorites(
#     favorite_type: str,
#     item_id: int,
#     db: Session = Depends(get_db),
#     current_user: User = Depends(get_current_active_user)
# ) -> Any:
#     """
#     –£–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ.
#     """
#     try:
#         # –ù–∞—Ö–æ–¥–∏–º –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –ø–æ —Ç–∏–ø—É –∏ ID —ç–ª–µ–º–µ–Ω—Ç–∞
#         favorite = None
#         
#         if favorite_type == 'salon':
#             favorite = (
#                 db.query(ClientFavorite)
#                 .filter(
#                     ClientFavorite.client_id == current_user.id,
#                     ClientFavorite.favorite_type == 'salon',
#                     ClientFavorite.salon_id == item_id
#                 )
#                 .first()
#             )
#         elif favorite_type == 'master':
#             favorite = (
#                 db.query(ClientFavorite)
#                 .filter(
#                     ClientFavorite.client_id == current_user.id,
#                     ClientFavorite.favorite_type == 'master',
#                     ClientFavorite.master_id == item_id
#                 )
#                 .first()
#             )
#         elif favorite_type == 'indie_master':
#             favorite = (
#                 db.query(ClientFavorite)
#                 .filter(
#                     ClientFavorite.client_id == current_user.id,
#                     ClientFavorite.favorite_type == 'indie_master',
#                     ClientFavorite.indie_master_id == item_id
#                 )
#                 .first()
#             )
#         elif favorite_type == 'service':
#             favorite = (
#                 db.query(ClientFavorite)
#                 .filter(
#                     ClientFavorite.client_id == current_user.id,
#                     ClientFavorite.favorite_type == 'service',
#                     ClientFavorite.service_id == item_id
#                 )
#                 .first()
#             )
#         
#         if not favorite:
#             raise HTTPException(status_code=404, detail="Favorite not found")
#         
#         db.delete(favorite)
#         db.commit()
#         
#         return FavoriteResponse(
#             success=True,
#             message="–£–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ",
#             favorite=None
#         )
#         
#     except HTTPException:
#         raise
#     except Exception as e:
#         db.rollback()
#         raise HTTPException(
#             status_code=500,
#             detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: {str(e)}"
#         )


# @router.get("/favorites/salons", response_model=List[ClientFavorite])
# def get_favorite_salons(
#     db: Session = Depends(get_db),
#     current_user: User = Depends(get_current_active_user)
# ) -> Any:
#     """
#     –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Å–∞–ª–æ–Ω–æ–≤.
#     """
#     favorites = (
#         db.query(ClientFavorite)
#         .options(joinedload(ClientFavorite.salon))
#         .filter(
#             ClientFavorite.client_id == current_user.id,
#             ClientFavorite.favorite_type == 'salon'
#         )
#         .all()
#     )
#     return favorites


# @router.get("/favorites/masters", response_model=List[ClientFavorite])
# def get_favorite_masters(
#     db: Session = Depends(get_db),
#     current_user: User = Depends(get_current_active_user)
# ) -> Any:
#     """
#     –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤.
#     """
#     favorites = (
#         db.query(ClientFavorite)
#         .options(joinedload(ClientFavorite.master).joinedload(Master.user))
#         .filter(
#             ClientFavorite.client_id == current_user.id,
#             ClientFavorite.favorite_type == 'master'
#         )
#         .all()
#     )
#     return favorites


# @router.get("/favorites/indie-masters", response_model=List[ClientFavorite])
# def get_favorite_indie_masters(
#     db: Session = Depends(get_db),
#     current_user: User = Depends(get_current_active_user)
# ) -> Any:
#     """
#     –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤.
#     """
#     favorites = (
#         db.query(ClientFavorite)
#         .options(joinedload(ClientFavorite.indie_master).joinedload(IndieMaster.user))
#         .filter(
#             ClientFavorite.client_id == current_user.id,
#             ClientFavorite.favorite_type == 'indie_master'
#         )
#         .all()
#     )
#     return favorites


# @router.get("/favorites/services", response_model=List[ClientFavorite])
# def get_favorite_services(
#     db: Session = Depends(get_db),
#     current_user: User = Depends(get_current_active_user)
# ) -> Any:
#     """
#     –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —É—Å–ª—É–≥.
#     """
#     favorites = (
#         db.query(ClientFavorite)
#         .options(
#             joinedload(ClientFavorite.service),
#             joinedload(ClientFavorite.salon),
#             joinedload(ClientFavorite.indie_master)
#         )
#         .filter(
#             ClientFavorite.client_id == current_user.id,
#             ClientFavorite.favorite_type == 'service'
#         )
#         .all()
#     )
#     return favorites


# @router.get("/favorites/check/{favorite_type}/{item_id}")
# def check_favorite_status(
#     favorite_type: str,
#     item_id: int,
#     db: Session = Depends(get_db),
#     current_user: User = Depends(get_current_active_user)
# ) -> Any:
#     """
#     –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞.
#     """
#     favorite = None
#     
#     if favorite_type == 'salon':
#         favorite = (
#             db.query(ClientFavorite)
#             .filter(
#                 ClientFavorite.client_id == current_user.id,
#                 ClientFavorite.favorite_type == 'salon',
#                 ClientFavorite.salon_id == item_id
#                 .first()
#             )
#         )
#     elif favorite_type == 'master':
#         favorite = (
#             db.query(ClientFavorite)
#             .filter(
#                 ClientFavorite.client_id == current_user.id,
#                 ClientFavorite.favorite_type == 'master',
#                 ClientFavorite.master_id == item_id
#                 .first()
#             )
#         )
#     elif favorite_type == 'indie_master':
#         favorite = (
#             db.query(ClientFavorite)
#             .filter(
#                 ClientFavorite.client_id == current_user.id,
#                 ClientFavorite.favorite_type == 'indie_master',
#                 ClientFavorite.indie_master_id == item_id
#                 .first()
#             )
#         )
#     elif favorite_type == 'service':
#         favorite = (
#             db.query(ClientFavorite)
#             .filter(
#                 ClientFavorite.client_id == current_user.id,
#                 ClientFavorite.favorite_type == 'service',
#                 ClientFavorite.service_id == item_id
#                 .first()
#             )
#         )
#     
#     return {"is_favorite": favorite is not None, "favorite_id": favorite.id if favorite else None}


@router.get("/notes/{note_type}/{target_id}", response_model=Optional[ClientNoteResponse])
def get_client_note(
    note_type: str,
    target_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_active_user)
) -> Any:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ —Ç–∏–ø—É –∏ ID —Ü–µ–ª–∏.
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–º–µ—Ç–∫—É –∫–ª–∏–µ–Ω—Ç–∞
        note = db.query(ClientNote).filter(
            ClientNote.client_phone == current_user.phone,
            ClientNote.note_type == note_type,
            ClientNote.target_id == target_id
        ).first()
        
        return note
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏: {e}")
        return None

@router.post("/notes", response_model=ClientNoteResponse)
def create_or_update_client_note(
    note_data: ClientNoteCreate,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_active_user)
) -> Any:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞.
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∑–∞–º–µ—Ç–∫–∞
        existing_note = db.query(ClientNote).filter(
            ClientNote.client_phone == current_user.phone,
            ClientNote.note_type == note_data.note_type,
            ClientNote.target_id == note_data.target_id
        ).first()
        
        if existing_note:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–º–µ—Ç–∫—É
            if note_data.salon_note is not None:
                existing_note.salon_note = note_data.salon_note
            if note_data.master_note is not None:
                existing_note.master_note = note_data.master_note
            existing_note.updated_at = datetime.utcnow()
            db.commit()
            db.refresh(existing_note)
            return existing_note
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É
            new_note = ClientNote(
                client_phone=current_user.phone,
                note_type=note_data.note_type,
                target_id=note_data.target_id,
                salon_note=note_data.salon_note,
                master_note=note_data.master_note
            )
            db.add(new_note)
            db.commit()
            db.refresh(new_note)
            return new_note
            
    except Exception as e:
        db.rollback()
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏")

@router.delete("/notes/{note_type}/{target_id}")
def delete_client_note(
    note_type: str,
    target_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_active_user)
) -> Any:
    """
    –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞.
    """
    try:
        note = db.query(ClientNote).filter(
            ClientNote.client_phone == current_user.phone,
            ClientNote.note_type == note_type,
            ClientNote.target_id == target_id
        ).first()
        
        if note:
            db.delete(note)
            db.commit()
            return {"message": "–ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞"}
        else:
            raise HTTPException(status_code=404, detail="–ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
    except HTTPException:
        raise
    except Exception as e:
        db.rollback()
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏")


# –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –∑–∞–º–µ—Ç–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ —Å–∞–ª–æ–Ω–∞—Ö
@profile_router.get("/salon-notes", response_model=List[ClientSalonNoteOut])
def get_client_salon_notes(
    current_user: User = Depends(get_current_active_user),
    db: Session = Depends(get_db)
) -> Any:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–º–µ—Ç–æ–∫ –∫–ª–∏–µ–Ω—Ç–∞ –æ —Å–∞–ª–æ–Ω–∞—Ö.
    """
    if current_user.role != UserRole.CLIENT:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤"
        )
    
    try:
        notes = (
            db.query(ClientSalonNote)
            .options(
                joinedload(ClientSalonNote.salon),
                joinedload(ClientSalonNote.branch)
            )
            .filter(ClientSalonNote.client_id == current_user.id)
            .order_by(ClientSalonNote.updated_at.desc())
            .all()
        )
        
        result = []
        for note in notes:
            result.append(ClientSalonNoteOut(
                id=note.id,
                salon_id=note.salon_id,
                branch_id=note.branch_id,
                note=note.note,
                created_at=note.created_at,
                updated_at=note.updated_at,
                salon_name=note.salon.name if note.salon else None,
                branch_name=note.branch.name if note.branch else None
            ))
        
        return result
        
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–æ–∫: {str(e)}"
        )


@profile_router.get("/salon-notes/{salon_id}", response_model=ClientSalonNoteOut)
def get_client_salon_note(
    salon_id: int,
    branch_id: Optional[int] = None,
    current_user: User = Depends(get_current_active_user),
    db: Session = Depends(get_db)
) -> Any:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Å–∞–ª–æ–Ω–µ.
    """
    if current_user.role != UserRole.CLIENT:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤"
        )
    
    try:
        query = db.query(ClientSalonNote).filter(
            ClientSalonNote.client_id == current_user.id,
            ClientSalonNote.salon_id == salon_id
        )
        
        if branch_id:
            query = query.filter(ClientSalonNote.branch_id == branch_id)
        else:
            query = query.filter(ClientSalonNote.branch_id.is_(None))
        
        note = query.first()
        
        if not note:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="–ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            )
        
        return ClientSalonNoteOut(
            id=note.id,
            salon_id=note.salon_id,
            branch_id=note.branch_id,
            note=note.note,
            created_at=note.created_at,
            updated_at=note.updated_at,
            salon_name=note.salon.name if note.salon else None,
            branch_name=note.branch.name if note.branch else None
        )
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏: {str(e)}"
        )


@profile_router.post("/salon-notes", response_model=ClientSalonNoteOut)
def create_client_salon_note(
    note_data: ClientSalonNoteCreate,
    current_user: User = Depends(get_current_active_user),
    db: Session = Depends(get_db)
) -> Any:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞ –æ —Å–∞–ª–æ–Ω–µ.
    """
    if current_user.role != UserRole.CLIENT:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤"
        )
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∑–∞–º–µ—Ç–∫–∞
        existing_note = (
            db.query(ClientSalonNote)
            .filter(
                ClientSalonNote.client_id == current_user.id,
                ClientSalonNote.salon_id == note_data.salon_id,
                ClientSalonNote.branch_id == note_data.branch_id
            )
            .first()
        )
        
        if existing_note:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–º–µ—Ç–∫—É
            existing_note.note = note_data.note
            existing_note.updated_at = datetime.utcnow()
            db.commit()
            
            return ClientSalonNoteOut(
                id=existing_note.id,
                salon_id=existing_note.salon_id,
                branch_id=existing_note.branch_id,
                note=existing_note.note,
                created_at=existing_note.created_at,
                updated_at=existing_note.updated_at,
                salon_name=existing_note.salon.name if existing_note.salon else None,
                branch_name=existing_note.branch.name if existing_note.branch else None
            )
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É
            new_note = ClientSalonNote(
                client_id=current_user.id,
                salon_id=note_data.salon_id,
                branch_id=note_data.branch_id,
                note=note_data.note
            )
            
            db.add(new_note)
            db.commit()
            db.refresh(new_note)
            
            return ClientSalonNoteOut(
                id=new_note.id,
                salon_id=new_note.salon_id,
                branch_id=new_note.branch_id,
                note=new_note.note,
                created_at=new_note.created_at,
                updated_at=new_note.updated_at,
                salon_name=new_note.salon.name if new_note.salon else None,
                branch_name=new_note.branch.name if new_note.branch else None
            )
        
    except Exception as e:
        db.rollback()
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏: {str(e)}"
        )


@profile_router.delete("/salon-notes/{salon_id}")
def delete_client_salon_note(
    salon_id: int,
    branch_id: Optional[int] = None,
    current_user: User = Depends(get_current_active_user),
    db: Session = Depends(get_db)
) -> Any:
    """
    –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞ –æ —Å–∞–ª–æ–Ω–µ.
    """
    if current_user.role != UserRole.CLIENT:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤"
        )
    
    try:
        query = db.query(ClientSalonNote).filter(
            ClientSalonNote.client_id == current_user.id,
            ClientSalonNote.salon_id == salon_id
        )
        
        if branch_id:
            query = query.filter(ClientSalonNote.branch_id == branch_id)
        else:
            query = query.filter(ClientSalonNote.branch_id.is_(None))
        
        note = query.first()
        
        if not note:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="–ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            )
        
        db.delete(note)
        db.commit()
        
        return {"message": "–ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞"}
        
    except HTTPException:
        raise
    except Exception as e:
        db.rollback()
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏: {str(e)}"
        )


# –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–º–µ—Ç–æ–∫ –∫–ª–∏–µ–Ω—Ç–∞
@profile_router.get("/all-notes", response_model=List[dict])
def get_all_client_notes(
    current_user: User = Depends(get_current_active_user),
    db: Session = Depends(get_db)
) -> Any:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–º–µ—Ç–æ–∫ –∫–ª–∏–µ–Ω—Ç–∞ (–∏ –æ –º–∞—Å—Ç–µ—Ä–∞—Ö, –∏ –æ —Å–∞–ª–æ–Ω–∞—Ö) –≤ –µ–¥–∏–Ω–æ–º —Å–ø–∏—Å–∫–µ.
    """
    if current_user.role != UserRole.CLIENT:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤"
        )
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–º–µ—Ç–∫–∏ –æ –º–∞—Å—Ç–µ—Ä–∞—Ö
        master_notes = (
            db.query(ClientMasterNote)
            .filter(ClientMasterNote.client_id == current_user.id)
            .all()
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–º–µ—Ç–∫–∏ –æ —Å–∞–ª–æ–Ω–∞—Ö
        salon_notes = (
            db.query(ClientSalonNote)
            .filter(ClientSalonNote.client_id == current_user.id)
            .all()
        )
        
        result = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫–∏ –æ –º–∞—Å—Ç–µ—Ä–∞—Ö (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        for note in master_notes:
            result.append({
                "id": f"master_{note.id}",  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º
                "type": "master",
                "master_id": note.master_id,
                "salon_id": note.salon_id,
                "branch_id": None,
                "note": note.note,
                "created_at": note.created_at,
                "updated_at": note.updated_at,
                "master_name": f"–ú–∞—Å—Ç–µ—Ä {note.master_id}",
                "salon_name": f"–°–∞–ª–æ–Ω {note.salon_id}",
                "branch_name": None
            })
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫–∏ –æ —Å–∞–ª–æ–Ω–∞—Ö (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        for note in salon_notes:
            result.append({
                "id": f"salon_{note.id}",  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º
                "type": "salon",
                "master_id": None,
                "salon_id": note.salon_id,
                "branch_id": note.branch_id,
                "note": note.note,
                "created_at": note.created_at,
                "updated_at": note.updated_at,
                "master_name": None,
                "salon_name": f"–°–∞–ª–æ–Ω {note.salon_id}",
                "branch_name": f"–§–∏–ª–∏–∞–ª {note.branch_id}" if note.branch_id else None
            })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
        result.sort(key=lambda x: x["updated_at"], reverse=True)
        
        return result
        
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–æ–∫: {str(e)}"
        )

