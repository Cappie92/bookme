#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–ø–∏—Å–∞–Ω–∏—è
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from datetime import datetime, date, timedelta
from sqlalchemy.orm import Session
from database import get_db
from models import User, Subscription, UserBalance, DailySubscriptionCharge
from utils.balance_utils import process_daily_charge, get_or_create_user_balance, deposit_balance
from services.daily_charges import process_all_daily_charges

def create_test_subscription():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    db = next(get_db())
    
    try:
        # –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = db.query(User).filter(User.role == 'salon').first()
        if not user:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ä–æ–ª—å—é 'salon'")
            return None
        
        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_balance = get_or_create_user_balance(db, user.id)
        
        # –ü–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        deposit_result = deposit_balance(db, user.id, 1000.0, "–¢–µ—Å—Ç–æ–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ")
        print(f"üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω –±–∞–ª–∞–Ω—Å: {deposit_result['balance_after']} —Ä—É–±.")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
        start_date = datetime.utcnow()
        end_date = start_date + timedelta(days=30)
        price = 300.0  # 300 —Ä—É–±–ª–µ–π –∑–∞ –º–µ—Å—è—Ü
        daily_rate = price / 30  # 10 —Ä—É–±–ª–µ–π –≤ –¥–µ–Ω—å
        
        subscription = Subscription(
            user_id=user.id,
            subscription_type='salon',
            status='active',
            salon_branches=2,
            salon_employees=5,
            master_bookings=0,
            start_date=start_date,
            end_date=end_date,
            price=price,
            daily_rate=daily_rate,
            is_active=True,
            auto_renewal=True,
            payment_method='card'
        )
        
        db.add(subscription)
        db.commit()
        db.refresh(subscription)
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞:")
        print(f"   ID: {subscription.id}")
        print(f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.email}")
        print(f"   –¢–∏–ø: {subscription.subscription_type}")
        print(f"   –°—Ç–æ–∏–º–æ—Å—Ç—å: {subscription.price} —Ä—É–±.")
        print(f"   –î–Ω–µ–≤–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {subscription.daily_rate:.2f} —Ä—É–±.")
        print(f"   –ü–µ—Ä–∏–æ–¥: {subscription.start_date.date()} - {subscription.end_date.date()}")
        
        return subscription
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        db.rollback()
        return None
    finally:
        db.close()

def test_daily_charge(subscription_id, test_date=None):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"""
    if test_date is None:
        test_date = date.today()
    
    print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–ø–∏—Å–∞–Ω–∏—è –∑–∞ {test_date}")
    
    db = next(get_db())
    try:
        result = process_daily_charge(db, subscription_id, test_date)
        return result
    finally:
        db.close()
    
    if result["success"]:
        print(f"‚úÖ –°–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ:")
        print(f"   –°—É–º–º–∞: {result['daily_rate']:.2f} —Ä—É–±.")
        print(f"   –ë–∞–ª–∞–Ω—Å –¥–æ: {result['balance_before']:.2f} —Ä—É–±.")
        print(f"   –ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ: {result['balance_after']:.2f} —Ä—É–±.")
        print(f"   ID –∑–∞–ø–∏—Å–∏: {result['charge_id']}")
    else:
        print(f"‚ùå –°–ø–∏—Å–∞–Ω–∏–µ –Ω–µ—É—Å–ø–µ—à–Ω–æ: {result['error']}")
        if result.get('subscription_deactivated'):
            print("   –ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑-–∑–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∞ —Å—Ä–µ–¥—Å—Ç–≤")
    
    return result

def test_all_daily_charges(test_date=None):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫"""
    if test_date is None:
        test_date = date.today()
    
    print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Å–ø–∏—Å–∞–Ω–∏–π –∑–∞ {test_date}")
    
    result = process_all_daily_charges(test_date)
    
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print(f"   –í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å–æ–∫: {result['total_subscriptions']}")
    print(f"   –£—Å–ø–µ—à–Ω—ã—Ö —Å–ø–∏—Å–∞–Ω–∏–π: {result['successful_charges']}")
    print(f"   –ù–µ—É—Å–ø–µ—à–Ω—ã—Ö —Å–ø–∏—Å–∞–Ω–∏–π: {result['failed_charges']}")
    print(f"   –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–¥–ø–∏—Å–æ–∫: {result['deactivated_subscriptions']}")
    
    if result.get('errors'):
        print(f"   –û—à–∏–±–∫–∏:")
        for error in result['errors']:
            print(f"     - {error}")
    
    return result

def show_balance_info(user_id):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    db = next(get_db())
    
    try:
        user_balance = db.query(UserBalance).filter(UserBalance.user_id == user_id).first()
        if user_balance:
            print(f"üí∞ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {user_balance.balance / 100:.2f} —Ä—É–±.")
        else:
            print(f"‚ùå –ë–∞–ª–∞–Ω—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    finally:
        db.close()

def show_subscription_info(subscription_id):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ"""
    db = next(get_db())
    
    try:
        subscription = db.query(Subscription).filter(Subscription.id == subscription_id).first()
        if subscription:
            print(f"üìã –ü–æ–¥–ø–∏—Å–∫–∞ {subscription_id}:")
            print(f"   –°—Ç–∞—Ç—É—Å: {subscription.status}")
            print(f"   –ê–∫—Ç–∏–≤–Ω–∞: {subscription.is_active}")
            print(f"   –ü–µ—Ä–∏–æ–¥: {subscription.start_date.date()} - {subscription.end_date.date()}")
            print(f"   –°—Ç–æ–∏–º–æ—Å—Ç—å: {subscription.price} —Ä—É–±.")
            print(f"   –î–Ω–µ–≤–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {subscription.daily_rate:.2f} —Ä—É–±.")
        else:
            print(f"‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ {subscription_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    finally:
        db.close()

def main():
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–ø–∏—Å–∞–Ω–∏—è")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
    subscription = create_test_subscription()
    if not subscription:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
    show_subscription_info(subscription.id)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    show_balance_info(subscription.user_id)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Å–µ–≥–æ–¥–Ω—è
    test_daily_charge(subscription.id, date.today())
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤—á–µ—Ä–∞
    yesterday = date.today() - timedelta(days=1)
    test_daily_charge(subscription.id, yesterday)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å–ø–∏—Å–∞–Ω–∏—è
    test_all_daily_charges(date.today())
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

if __name__ == "__main__":
    main() 