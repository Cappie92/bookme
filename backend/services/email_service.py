import os
from abc import ABC, abstractmethod
from datetime import datetime, timedelta
from typing import Optional
from urllib.parse import urljoin

from fastapi import HTTPException
from sqlalchemy.orm import Session

from database import get_db
from models import User, EmailVerification, PasswordReset
from auth import create_access_token, get_password_hash, verify_password


class EmailService(ABC):
    """–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è email —Å–µ—Ä–≤–∏—Å–∞"""
    
    def __init__(self):
        self.base_url = os.getenv("FRONTEND_URL", "http://localhost:5175")
    
    @abstractmethod
    async def send_email(self, to_email: str, subject: str, html_content: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å email"""
        pass
    
    @abstractmethod
    async def send_verification_email(self, user: User, verification_token: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email"""
        pass
    
    @abstractmethod
    async def send_password_reset_email(self, user: User, reset_token: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è"""
        pass


class MockEmailService(EmailService):
    """–ú–æ–∫ —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å–µ–º"""
    
    async def send_email(self, to_email: str, subject: str, html_content: str) -> bool:
        """–ú–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ email - –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º"""
        print(f"\n{'='*60}")
        print(f"üìß –ú–û–ö EMAIL")
        print(f"–ö–æ–º—É: {to_email}")
        print(f"–¢–µ–º–∞: {subject}")
        print(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {html_content}")
        print(f"{'='*60}\n")
        return True
    
    async def send_verification_email(self, user: User, verification_token: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email"""
        verification_url = urljoin(self.base_url, f"/verify-email?token={verification_token}")
        
        subject = "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à email"
        html_content = f"""
        <html>
        <body>
            <h2>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ DeDato!</h2>
            <p>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.full_name or user.email}!</p>
            <p>–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à email, –ø–µ—Ä–µ–π–¥—è –ø–æ —Å—Å—ã–ª–∫–µ:</p>
            <p><a href="{verification_url}">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å email</a></p>
            <p>–ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ—ë –≤ –±—Ä–∞—É–∑–µ—Ä:</p>
            <p>{verification_url}</p>
            <p>–°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.</p>
            <br>
            <p>–° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>–ö–æ–º–∞–Ω–¥–∞ DeDato</p>
        </body>
        </html>
        """
        
        return await self.send_email(user.email, subject, html_content)
    
    async def send_password_reset_email(self, user: User, reset_token: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è"""
        reset_url = urljoin(self.base_url, f"/reset-password?token={reset_token}")
        
        subject = "–°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è"
        html_content = f"""
        <html>
        <body>
            <h2>–°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è</h2>
            <p>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.full_name or user.email}!</p>
            <p>–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è. –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:</p>
            <p><a href="{reset_url}">–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å</a></p>
            <p>–ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ—ë –≤ –±—Ä–∞—É–∑–µ—Ä:</p>
            <p>{reset_url}</p>
            <p>–°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 1 —á–∞—Å–∞.</p>
            <p>–ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è, –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ.</p>
            <br>
            <p>–° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>–ö–æ–º–∞–Ω–¥–∞ DeDato</p>
        </body>
        </html>
        """
        
        return await self.send_email(user.email, subject, html_content)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä email —Å–µ—Ä–≤–∏—Å–∞
email_service = MockEmailService()


def get_email_service() -> EmailService:
    """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä email —Å–µ—Ä–≤–∏—Å–∞"""
    return email_service


def set_email_service(service: EmailService):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å email —Å–µ—Ä–≤–∏—Å (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
    global email_service
    email_service = service 