#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Excel —Ç–∞–±–ª–∏—Ü—ã —Å –ª–æ–≥–∏–Ω–∞–º–∏ –∏ –ø–∞—Ä–æ–ª—è–º–∏ —Ç–µ—Å—Ç–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
"""

import pandas as pd
from database import SessionLocal
from models import User, UserRole, Master, IndieMaster, Salon

def generate_excel_table():
    db = SessionLocal()
    
    try:
        print("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Excel —Ç–∞–±–ª–∏—Ü—ã —Å –ª–æ–≥–∏–Ω–∞–º–∏ –∏ –ø–∞—Ä–æ–ª—è–º–∏...")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = db.query(User).filter(User.role != UserRole.ADMIN).all()
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ä–æ–ª—è–º
        clients = [u for u in users if u.role == UserRole.CLIENT]
        masters = [u for u in users if u.role == UserRole.MASTER]
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Å—Ç–µ—Ä–∞—Ö
        master_info = {}
        for master in db.query(Master).all():
            master_info[master.user_id] = "–°–∞–ª–æ–Ω–Ω—ã–π –º–∞—Å—Ç–µ—Ä"
        
        for indie_master in db.query(IndieMaster).all():
            if indie_master.user_id in master_info:
                master_info[indie_master.user_id] = "–ì–∏–±—Ä–∏–¥–Ω—ã–π –º–∞—Å—Ç–µ—Ä"
            else:
                master_info[indie_master.user_id] = "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –º–∞—Å—Ç–µ—Ä"
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∞–ª–æ–Ω–∞—Ö
        salon_info = {}
        for salon in db.query(Salon).all():
            salon_info[salon.id] = salon.name
        
        # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
        clients_data = []
        for i, client in enumerate(clients, 1):
            clients_data.append({
                '‚Ññ': i,
                'Email': client.email,
                '–ü–∞—Ä–æ–ª—å': 'test123',
                '–§–ò–û': client.full_name,
                '–†–æ–ª—å': '–ö–ª–∏–µ–Ω—Ç',
                '–¢–µ–ª–µ—Ñ–æ–Ω': client.phone
            })
        
        # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–∞—Å—Ç–µ—Ä–æ–≤
        masters_data = []
        for i, master in enumerate(masters, 1):
            master_type = master_info.get(master.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            masters_data.append({
                '‚Ññ': i,
                'Email': master.email,
                '–ü–∞—Ä–æ–ª—å': 'test123',
                '–§–ò–û': master.full_name,
                '–†–æ–ª—å': master_type,
                '–¢–µ–ª–µ—Ñ–æ–Ω': master.phone
            })
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ —Å–∞–ª–æ–Ω–æ–≤
        salon_owners = db.query(User).filter(User.role == UserRole.ADMIN, User.email.like('salon%@test.com')).all()
        owners_data = []
        for i, owner in enumerate(salon_owners, 1):
            owners_data.append({
                '‚Ññ': i,
                'Email': owner.email,
                '–ü–∞—Ä–æ–ª—å': 'test123',
                '–§–ò–û': owner.full_name,
                '–†–æ–ª—å': '–í–ª–∞–¥–µ–ª–µ—Ü —Å–∞–ª–æ–Ω–∞',
                '–¢–µ–ª–µ—Ñ–æ–Ω': owner.phone
            })
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∞–ª–æ–Ω–∞—Ö
        salons = db.query(Salon).all()
        salons_data = []
        for i, salon in enumerate(salons, 1):
            salons_data.append({
                '‚Ññ': i,
                '–ù–∞–∑–≤–∞–Ω–∏–µ': salon.name,
                'Email': salon.email,
                '–¢–µ–ª–µ—Ñ–æ–Ω': salon.phone,
                '–ì–æ—Ä–æ–¥': salon.city,
                '–û–ø–∏—Å–∞–Ω–∏–µ': salon.description
            })
        
        # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª
        with pd.ExcelWriter('test_system_access.xlsx', engine='openpyxl') as writer:
            # –õ–∏—Å—Ç —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏
            df_clients = pd.DataFrame(clients_data)
            df_clients.to_excel(writer, sheet_name='–ö–ª–∏–µ–Ω—Ç—ã', index=False)
            
            # –õ–∏—Å—Ç —Å –º–∞—Å—Ç–µ—Ä–∞–º–∏
            df_masters = pd.DataFrame(masters_data)
            df_masters.to_excel(writer, sheet_name='–ú–∞—Å—Ç–µ—Ä–∞', index=False)
            
            # –õ–∏—Å—Ç —Å –≤–ª–∞–¥–µ–ª—å—Ü–∞–º–∏ —Å–∞–ª–æ–Ω–æ–≤
            df_owners = pd.DataFrame(owners_data)
            df_owners.to_excel(writer, sheet_name='–í–ª–∞–¥–µ–ª—å—Ü—ã —Å–∞–ª–æ–Ω–æ–≤', index=False)
            
            # –õ–∏—Å—Ç —Å —Å–∞–ª–æ–Ω–∞–º–∏
            df_salons = pd.DataFrame(salons_data)
            df_salons.to_excel(writer, sheet_name='–°–∞–ª–æ–Ω—ã', index=False)
            
            # –õ–∏—Å—Ç —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
            instructions_data = [
                {'–ü—É–Ω–∫—Ç': '1', '–î–µ–π—Å—Ç–≤–∏–µ': '–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –∏ –±—ç–∫–µ–Ω–¥', '–û–ø–∏—Å–∞–Ω–∏–µ': '–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–±–∞ —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞–±–æ—Ç–∞—é—Ç'},
                {'–ü—É–Ω–∫—Ç': '2', '–î–µ–π—Å—Ç–≤–∏–µ': '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª—é–±–æ–π email –∏ –ø–∞—Ä–æ–ª—å test123', '–û–ø–∏—Å–∞–Ω–∏–µ': '–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –ø–∞—Ä–æ–ª—å'},
                {'–ü—É–Ω–∫—Ç': '3', '–î–µ–π—Å—Ç–≤–∏–µ': '–¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Ä–∞–∑–Ω—ã–µ —Ä–æ–ª–∏', '–û–ø–∏—Å–∞–Ω–∏–µ': '–ö–ª–∏–µ–Ω—Ç—ã, –º–∞—Å—Ç–µ—Ä–∞, –≤–ª–∞–¥–µ–ª—å—Ü—ã —Å–∞–ª–æ–Ω–æ–≤'},
                {'–ü—É–Ω–∫—Ç': '4', '–î–µ–π—Å—Ç–≤–∏–µ': '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞—à–±–æ—Ä–¥—ã', '–û–ø–∏—Å–∞–Ω–∏–µ': '–ö–∞–∂–¥–∞—è —Ä–æ–ª—å –∏–º–µ–µ—Ç —Å–≤–æ–π –¥–∞—à–±–æ—Ä–¥'},
                {'–ü—É–Ω–∫—Ç': '5', '–î–µ–π—Å—Ç–≤–∏–µ': '–¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è', '–û–ø–∏—Å–∞–Ω–∏–µ': '–°–æ–∑–¥–∞–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –æ—Ç–º–µ–Ω–∞'},
                {'–ü—É–Ω–∫—Ç': '6', '–î–µ–π—Å—Ç–≤–∏–µ': '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∞–º–∏', '–û–ø–∏—Å–∞–Ω–∏–µ': '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ª—É–≥'},
                {'–ü—É–Ω–∫—Ç': '7', '–î–µ–π—Å—Ç–≤–∏–µ': '–¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', '–û–ø–∏—Å–∞–Ω–∏–µ': '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤'},
                {'–ü—É–Ω–∫—Ç': '8', '–î–µ–π—Å—Ç–≤–∏–µ': '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏', '–û–ø–∏—Å–∞–Ω–∏–µ': '–î–∞—à–±–æ—Ä–¥—ã, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è, –±—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è'}
            ]
            df_instructions = pd.DataFrame(instructions_data)
            df_instructions.to_excel(writer, sheet_name='–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é', index=False)
            
            # –õ–∏—Å—Ç —Å –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            summary_data = [
                {'–ü–∞—Ä–∞–º–µ—Ç—Ä': '–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', '–ó–Ω–∞—á–µ–Ω–∏–µ': len(users) + len(salon_owners)},
                {'–ü–∞—Ä–∞–º–µ—Ç—Ä': '–ö–ª–∏–µ–Ω—Ç–æ–≤', '–ó–Ω–∞—á–µ–Ω–∏–µ': len(clients)},
                {'–ü–∞—Ä–∞–º–µ—Ç—Ä': '–ú–∞—Å—Ç–µ—Ä–æ–≤', '–ó–Ω–∞—á–µ–Ω–∏–µ': len(masters)},
                {'–ü–∞—Ä–∞–º–µ—Ç—Ä': '–í–ª–∞–¥–µ–ª—å—Ü–µ–≤ —Å–∞–ª–æ–Ω–æ–≤', '–ó–Ω–∞—á–µ–Ω–∏–µ': len(salon_owners)},
                {'–ü–∞—Ä–∞–º–µ—Ç—Ä': '–°–∞–ª–æ–Ω–æ–≤', '–ó–Ω–∞—á–µ–Ω–∏–µ': len(salons)},
                {'–ü–∞—Ä–∞–º–µ—Ç—Ä': '–§–∏–ª–∏–∞–ª–æ–≤', '–ó–Ω–∞—á–µ–Ω–∏–µ': len(salons) * 2},
                {'–ü–∞—Ä–∞–º–µ—Ç—Ä': '–£—Å–ª—É–≥ –≤ —Å–∞–ª–æ–Ω–∞—Ö', '–ó–Ω–∞—á–µ–Ω–∏–µ': 10},
                {'–ü–∞—Ä–∞–º–µ—Ç—Ä': '–£—Å–ª—É–≥ —É –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª–æ–≤', '–ó–Ω–∞—á–µ–Ω–∏–µ': 18},
                {'–ü–∞—Ä–∞–º–µ—Ç—Ä': '–¢–∏–ø–æ–≤ —É—Å–ª—É–≥', '–ó–Ω–∞—á–µ–Ω–∏–µ': 8},
                {'–ü–∞—Ä–∞–º–µ—Ç—Ä': '–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π', '–ó–Ω–∞—á–µ–Ω–∏–µ': '~60+'},
                {'–ü–∞—Ä–∞–º–µ—Ç—Ä': '–ü–µ—Ä–∏–æ–¥ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π', '–ó–Ω–∞—á–µ–Ω–∏–µ': '2 –Ω–µ–¥–µ–ª–∏'},
                {'–ü–∞—Ä–∞–º–µ—Ç—Ä': '–í—Å–µ –ø–∞—Ä–æ–ª–∏', '–ó–Ω–∞—á–µ–Ω–∏–µ': 'test123'}
            ]
            df_summary = pd.DataFrame(summary_data)
            df_summary.to_excel(writer, sheet_name='–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', index=False)
        
        print("‚úÖ Excel —Ç–∞–±–ª–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞: test_system_access.xlsx")
        print(f"üìä –°–æ–¥–µ—Ä–∂–∏—Ç {len(clients)} –∫–ª–∏–µ–Ω—Ç–æ–≤, {len(masters)} –º–∞—Å—Ç–µ—Ä–æ–≤, {len(salon_owners)} –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ —Å–∞–ª–æ–Ω–æ–≤")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel —Ç–∞–±–ª–∏—Ü—ã: {e}")
        return False
    finally:
        db.close()

if __name__ == "__main__":
    generate_excel_table()
