#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ master_schedules
–ó–∞–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª—è date, start_time, end_time –Ω–∞ –æ—Å–Ω–æ–≤–µ available
"""

import sqlite3
from datetime import datetime, timedelta
import re

def fix_schedule_data():
    conn = sqlite3.connect('bookme.db')
    cursor = conn.cursor()
    
    print("=" * 80)
    print("–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –§–û–†–ú–ê–¢–ê –î–ê–ù–ù–´–• –í master_schedules")
    print("=" * 80)
    
    # 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å NULL –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    cursor.execute("""
        SELECT id, master_id, salon_id, available, created_at
        FROM master_schedules 
        WHERE date IS NULL OR start_time IS NULL OR end_time IS NULL
        ORDER BY id
    """)
    
    records = cursor.fetchall()
    print(f"\n–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {len(records)}")
    
    if len(records) == 0:
        print("–í—Å–µ –∑–∞–ø–∏—Å–∏ —É–∂–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ!")
        conn.close()
        return
    
    # 2. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∑–∞–ø–∏—Å—å
    fixed_count = 0
    for record in records:
        record_id, master_id, salon_id, available, created_at = record
        
        print(f"\n–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø–∏—Å—å ID {record_id}:")
        print(f"  Master: {master_id}, Salon: {salon_id}")
        print(f"  Available: {available}")
        print(f"  Created: {created_at}")
        
        if not available:
            print("  ‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º - –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ available")
            continue
        
        # –ü–∞—Ä—Å–∏–º available (—Ñ–æ—Ä–º–∞—Ç: "09:00-18:00")
        time_match = re.match(r'(\d{2}):(\d{2})-(\d{2}):(\d{2})', available)
        if not time_match:
            print(f"  ‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º - –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç available: {available}")
            continue
        
        start_hour, start_min, end_hour, end_min = time_match.groups()
        start_time = f"{start_hour}:{start_min}:00"
        end_time = f"{end_hour}:{end_min}:00"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É –Ω–∞ –æ—Å–Ω–æ–≤–µ created_at
        if created_at:
            # –ï—Å–ª–∏ –µ—Å—Ç—å created_at, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
            created_date = datetime.fromisoformat(created_at.replace('Z', '+00:00'))
            date = created_date.strftime('%Y-%m-%d')
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç created_at, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É
            date = datetime.now().strftime('%Y-%m-%d')
        
        print(f"  ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º: date={date}, start_time={start_time}, end_time={end_time}")
        
        # 3. –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
        cursor.execute("""
            UPDATE master_schedules 
            SET date = ?, start_time = ?, end_time = ?
            WHERE id = ?
        """, (date, start_time, end_time, record_id))
        
        fixed_count += 1
    
    # 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    conn.commit()
    
    print(f"\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {fixed_count}")
    
    # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç:")
    cursor.execute("""
        SELECT COUNT(*) as total,
               COUNT(CASE WHEN date IS NOT NULL THEN 1 END) as with_date,
               COUNT(CASE WHEN start_time IS NOT NULL THEN 1 END) as with_start_time,
               COUNT(CASE WHEN end_time IS NOT NULL THEN 1 END) as with_end_time
        FROM master_schedules
    """)
    
    stats = cursor.fetchone()
    print(f"  –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {stats[0]}")
    print(f"  –° –¥–∞—Ç–æ–π: {stats[1]}")
    print(f"  –° –≤—Ä–µ–º–µ–Ω–µ–º –Ω–∞—á–∞–ª–∞: {stats[2]}")
    print(f"  –° –≤—Ä–µ–º–µ–Ω–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è: {stats[3]}")
    
    # 6. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
    print("\n–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π:")
    cursor.execute("""
        SELECT id, master_id, salon_id, date, start_time, end_time, available
        FROM master_schedules 
        WHERE date IS NOT NULL
        ORDER BY id
        LIMIT 5
    """)
    
    examples = cursor.fetchall()
    for ex in examples:
        print(f"  ID {ex[0]}: Master {ex[1]}, Salon {ex[2]}, Date {ex[3]}, Time {ex[4]}-{ex[5]}, Available {ex[6]}")
    
    conn.close()
    print("\nüéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    fix_schedule_data()
