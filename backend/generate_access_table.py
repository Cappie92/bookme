#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–µ—Å—Ç–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ
–°–æ–∑–¥–∞–µ—Ç Excel —Ñ–∞–π–ª —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–æ—Å—Ç—É–ø–∞—Ö
"""

from database import SessionLocal
from models import User, UserRole, Master, IndieMaster, Salon
import pandas as pd
from datetime import datetime

def generate_access_table():
    db = SessionLocal()
    
    try:
        print("üîê –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–µ—Å—Ç–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ")
        print("=" * 80)
        print("üìã –¢–ê–ë–õ–ò–¶–ê –î–û–°–¢–£–ü–ê –ö –¢–ï–°–¢–û–í–û–ô –°–ò–°–¢–ï–ú–ï")
        print("=" * 80)
        print()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = db.query(User).filter(User.role != UserRole.ADMIN).all()
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ä–æ–ª—è–º
        clients = [u for u in users if u.role == UserRole.CLIENT]
        masters = [u for u in users if u.role == UserRole.MASTER]
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Å—Ç–µ—Ä–∞—Ö
        master_info = {}
        for master in db.query(Master).all():
            master_info[master.user_id] = "–°–∞–ª–æ–Ω–Ω—ã–π –º–∞—Å—Ç–µ—Ä"
        
        for indie_master in db.query(IndieMaster).all():
            if indie_master.user_id in master_info:
                master_info[indie_master.user_id] = "–ì–∏–±—Ä–∏–¥–Ω—ã–π –º–∞—Å—Ç–µ—Ä"
            else:
                master_info[indie_master.user_id] = "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –º–∞—Å—Ç–µ—Ä"
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∞–ª–æ–Ω–∞—Ö
        salon_info = {}
        for salon in db.query(Salon).all():
            salon_info[salon.id] = salon.name
        
        print("üë• –ö–õ–ò–ï–ù–¢–´ (20 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)")
        print("-" * 70)
        print(f"{'‚Ññ':<3} {'Email':<25} {'–ü–∞—Ä–æ–ª—å':<10} {'–§–ò–û':<20} {'–¢–µ–ª–µ—Ñ–æ–Ω':<15}")
        print("-" * 70)
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è Excel
        clients_data = []
        for i, client in enumerate(clients, 1):
            print(f"{i:<3} {client.email:<25} {'test123':<10} {client.full_name:<20} {client.phone:<15}")
            clients_data.append({
                '‚Ññ': i,
                'Email': client.email,
                '–ü–∞—Ä–æ–ª—å': 'test123',
                '–§–ò–û': client.full_name,
                '–¢–µ–ª–µ—Ñ–æ–Ω': client.phone,
                '–†–æ–ª—å': '–ö–ª–∏–µ–Ω—Ç'
            })
        
        print()
        print("üë®‚Äçüíº –ú–ê–°–¢–ï–†–ê (10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)")
        print("-" * 80)
        print(f"{'‚Ññ':<3} {'Email':<25} {'–ü–∞—Ä–æ–ª—å':<10} {'–§–ò–û':<25} {'–¢–∏–ø':<20} {'–¢–µ–ª–µ—Ñ–æ–Ω':<15}")
        print("-" * 80)
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è Excel
        masters_data = []
        for i, master in enumerate(masters, 1):
            master_type = master_info.get(master.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            print(f"{i:<3} {master.email:<25} {'test123':<10} {master.full_name:<25} {master_type:<20} {master.phone:<15}")
            masters_data.append({
                '‚Ññ': i,
                'Email': master.email,
                '–ü–∞—Ä–æ–ª—å': 'test123',
                '–§–ò–û': master.full_name,
                '–¢–∏–ø': master_type,
                '–¢–µ–ª–µ—Ñ–æ–Ω': master.phone,
                '–†–æ–ª—å': '–ú–∞—Å—Ç–µ—Ä'
            })
        
        print()
        print("üè¢ –°–ê–õ–û–ù–´")
        print("-" * 40)
        salons = db.query(Salon).all()
        salons_data = []
        for i, salon in enumerate(salons, 1):
            print(f"{i}. {salon.name}")
            print(f"   Email: {salon.email}")
            print(f"   –¢–µ–ª–µ—Ñ–æ–Ω: {salon.phone}")
            print(f"   –ì–æ—Ä–æ–¥: {salon.city}")
            salons_data.append({
                '‚Ññ': i,
                '–ù–∞–∑–≤–∞–Ω–∏–µ': salon.name,
                'Email': salon.email,
                '–¢–µ–ª–µ—Ñ–æ–Ω': salon.phone,
                '–ì–æ—Ä–æ–¥': salon.city,
                '–¢–∏–ø': '–°–∞–ª–æ–Ω'
            })
            print()
        
        print("üëë –í–õ–ê–î–ï–õ–¨–¶–´ –°–ê–õ–û–ù–û–í")
        print("-" * 50)
        salon_owners = db.query(User).filter(User.role == UserRole.ADMIN, User.email.like('salon%@test.com')).all()
        owners_data = []
        for i, owner in enumerate(salon_owners, 1):
            print(f"{i}. {owner.full_name}")
            print(f"   Email: {owner.email}")
            print(f"   –ü–∞—Ä–æ–ª—å: test123")
            print(f"   –†–æ–ª—å: –í–ª–∞–¥–µ–ª–µ—Ü —Å–∞–ª–æ–Ω–∞")
            print(f"   –¢–µ–ª–µ—Ñ–æ–Ω: {owner.phone}")
            owners_data.append({
                '‚Ññ': i,
                'Email': owner.email,
                '–ü–∞—Ä–æ–ª—å': 'test123',
                '–§–ò–û': owner.full_name,
                '–†–æ–ª—å': '–í–ª–∞–¥–µ–ª–µ—Ü —Å–∞–ª–æ–Ω–∞',
                '–¢–µ–ª–µ—Ñ–æ–Ω': owner.phone,
                '–¢–∏–ø': '–í–ª–∞–¥–µ–ª–µ—Ü —Å–∞–ª–æ–Ω–∞'
            })
            print()
        
        # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª
        print("üìä –°–æ–∑–¥–∞–Ω–∏–µ Excel —Ñ–∞–π–ª–∞ —Å —Ç–∞–±–ª–∏—Ü–µ–π –¥–æ—Å—Ç—É–ø–∞...")
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        all_data = clients_data + masters_data + owners_data
        
        # –°–æ–∑–¥–∞–µ–º DataFrame
        df = pd.DataFrame(all_data)
        
        # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ª–∏—Å—Ç–∞–º–∏
        with pd.ExcelWriter('test_system_access.xlsx', engine='openpyxl') as writer:
            # –û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
            df.to_excel(writer, sheet_name='–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', index=False)
            
            # –õ–∏—Å—Ç —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏
            clients_df = pd.DataFrame(clients_data)
            clients_df.to_excel(writer, sheet_name='–ö–ª–∏–µ–Ω—Ç—ã', index=False)
            
            # –õ–∏—Å—Ç —Å –º–∞—Å—Ç–µ—Ä–∞–º–∏
            masters_df = pd.DataFrame(masters_data)
            masters_df.to_excel(writer, sheet_name='–ú–∞—Å—Ç–µ—Ä–∞', index=False)
            
            # –õ–∏—Å—Ç —Å —Å–∞–ª–æ–Ω–∞–º–∏
            salons_df = pd.DataFrame(salons_data)
            salons_df.to_excel(writer, sheet_name='–°–∞–ª–æ–Ω—ã', index=False)
            
            # –õ–∏—Å—Ç —Å –≤–ª–∞–¥–µ–ª—å—Ü–∞–º–∏
            owners_df = pd.DataFrame(owners_data)
            owners_df.to_excel(writer, sheet_name='–í–ª–∞–¥–µ–ª—å—Ü—ã —Å–∞–ª–æ–Ω–æ–≤', index=False)
        
        print("‚úÖ Excel —Ñ–∞–π–ª 'test_system_access.xlsx' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
        
        print()
        print("=" * 80)
        print("üìù –ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Æ:")
        print("=" * 80)
        print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –∏ –±—ç–∫–µ–Ω–¥")
        print("2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª—é–±–æ–π email –∏ –ø–∞—Ä–æ–ª—å 'test123' –¥–ª—è –≤—Ö–æ–¥–∞")
        print("3. –¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Ä–∞–∑–Ω—ã–µ —Ä–æ–ª–∏:")
        print("   ‚Ä¢ –ö–ª–∏–µ–Ω—Ç—ã: –º–æ–≥—É—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —É—Å–ª—É–≥–∏")
        print("   ‚Ä¢ –ú–∞—Å—Ç–µ—Ä–∞: –º–æ–≥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –∏ —É—Å–ª—É–≥–∞–º–∏")
        print("   ‚Ä¢ –°–∞–ª–æ–Ω–Ω—ã–µ –º–∞—Å—Ç–µ—Ä–∞: —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –≤ —Å–∞–ª–æ–Ω–∞—Ö")
        print("   ‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –º–∞—Å—Ç–µ—Ä–∞: —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞ —Å–µ–±—è")
        print("   ‚Ä¢ –ì–∏–±—Ä–∏–¥–Ω—ã–µ –º–∞—Å—Ç–µ—Ä–∞: —Ä–∞–±–æ—Ç–∞—é—Ç –∏ –≤ —Å–∞–ª–æ–Ω–∞—Ö, –∏ –Ω–∞ —Å–µ–±—è")
        print("4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞—à–±–æ—Ä–¥—ã –¥–ª—è –∫–∞–∂–¥–æ–π —Ä–æ–ª–∏")
        print("5. –¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∞–º–∏ –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º")
        print()
        print("üîë –í–°–ï –ü–ê–†–û–õ–ò: test123")
        print("üì± –í–°–ï –ù–û–ú–ï–†–ê –¢–ï–õ–ï–§–û–ù–û–í: 10 —Ü–∏—Ñ—Ä –ø–æ—Å–ª–µ +7 (—Ñ–æ—Ä–º–∞—Ç +7XXXXXXXXXX)")
        print("=" * 80)
        
        return {
            'clients': clients,
            'masters': masters,
            'salons': salons,
            'owners': salon_owners
        }
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã: {e}")
        raise
    finally:
        db.close()

if __name__ == "__main__":
    generate_access_table()
