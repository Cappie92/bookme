#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π —Å–∞–ª–æ–Ω–æ–≤ –∏ –º–∞—Å—Ç–µ—Ä–æ–≤.
"""

import sys
import os
from sqlalchemy.orm import Session

sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from database import get_db
from models import AvailabilitySlot, OwnerType

def check_working_days():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏ –¥–ª—è –≤—Å–µ—Ö —Å–∞–ª–æ–Ω–æ–≤ –∏ –º–∞—Å—Ç–µ—Ä–æ–≤"""
    
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π...")
    
    db = next(get_db())
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∞–ª–æ–Ω—ã
        print("\nüè¢ –†–ê–ë–û–ß–ò–ï –î–ù–ò –°–ê–õ–û–ù–û–í:")
        salon_slots = db.query(AvailabilitySlot).filter(
            AvailabilitySlot.owner_type == OwnerType.SALON
        ).all()
        
        salon_ids = set(slot.owner_id for slot in salon_slots)
        
        for salon_id in sorted(salon_ids):
            print(f"\n–°–∞–ª–æ–Ω ID {salon_id}:")
            salon_days = [slot for slot in salon_slots if slot.owner_id == salon_id]
            
            for slot in sorted(salon_days, key=lambda x: x.day_of_week):
                day_names = ["", "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
                day_name = day_names[slot.day_of_week] if 1 <= slot.day_of_week <= 7 else f"–î–µ–Ω—å {slot.day_of_week}"
                print(f"  {day_name} (–¥–µ–Ω—å {slot.day_of_week}): {slot.start_time}-{slot.end_time}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Å—Ç–µ—Ä–æ–≤
        print("\nüë®‚Äçüíº –†–ê–ë–û–ß–ò–ï –î–ù–ò –ú–ê–°–¢–ï–†–û–í:")
        master_slots = db.query(AvailabilitySlot).filter(
            AvailabilitySlot.owner_type == OwnerType.MASTER
        ).all()
        
        master_ids = set(slot.owner_id for slot in master_slots)
        
        for master_id in sorted(master_ids):
            print(f"\n–ú–∞—Å—Ç–µ—Ä ID {master_id}:")
            master_days = [slot for slot in master_slots if slot.owner_id == master_id]
            
            for slot in sorted(master_days, key=lambda x: x.day_of_week):
                day_names = ["", "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
                day_name = day_names[slot.day_of_week] if 1 <= slot.day_of_week <= 7 else f"–î–µ–Ω—å {slot.day_of_week}"
                print(f"  {day_name} (–¥–µ–Ω—å {slot.day_of_week}): {slot.start_time}-{slot.end_time}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤
        print("\nüé® –†–ê–ë–û–ß–ò–ï –î–ù–ò –ò–ù–î–ò–í–ò–î–£–ê–õ–¨–ù–´–• –ú–ê–°–¢–ï–†–û–í:")
        indie_slots = db.query(AvailabilitySlot).filter(
            AvailabilitySlot.owner_type == OwnerType.MASTER,
            AvailabilitySlot.owner_id.in_([im.id for im in indie_masters])
        ).all()
        
        indie_ids = set(slot.owner_id for slot in indie_slots)
        
        for indie_id in sorted(indie_ids):
            print(f"\n–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –º–∞—Å—Ç–µ—Ä ID {indie_id}:")
            indie_days = [slot for slot in indie_slots if slot.owner_id == indie_id]
            
            for slot in sorted(indie_days, key=lambda x: x.day_of_week):
                day_names = ["", "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
                day_name = day_names[slot.day_of_week] if 1 <= slot.day_of_week <= 7 else f"–î–µ–Ω—å {slot.day_of_week}"
                print(f"  {day_name} (–¥–µ–Ω—å {slot.day_of_week}): {slot.start_time}-{slot.end_time}")
        
        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"  –°–∞–ª–æ–Ω–æ–≤: {len(salon_ids)}")
        print(f"  –ú–∞—Å—Ç–µ—Ä–æ–≤: {len(master_ids)}")
        print(f"  –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤: {len(indie_ids)}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
    finally:
        db.close()

if __name__ == "__main__":
    check_working_days()
