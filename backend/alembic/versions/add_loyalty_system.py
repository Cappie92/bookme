"""add_loyalty_system

Revision ID: add_loyalty_system
Revises: add_phone_verification_only
Create Date: 2025-07-23 17:10:00.000000

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'add_loyalty_system'
down_revision: Union[str, None] = 'add_phone_verification_only'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Создаем таблицу loyalty_discounts
    op.create_table('loyalty_discounts',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('salon_id', sa.Integer(), nullable=False),
        sa.Column('discount_type', sa.String(), nullable=False),  # 'quick', 'complex', 'personal'
        sa.Column('name', sa.String(), nullable=False),
        sa.Column('description', sa.Text(), nullable=True),
        sa.Column('discount_percent', sa.Float(), nullable=False),
        sa.Column('max_discount_amount', sa.Float(), nullable=True),
        sa.Column('conditions', sa.JSON(), nullable=False),
        sa.Column('is_active', sa.Boolean(), default=True),
        sa.Column('priority', sa.Integer(), default=1),
        sa.Column('created_at', sa.DateTime(), default=sa.func.now()),
        sa.Column('updated_at', sa.DateTime(), default=sa.func.now(), onupdate=sa.func.now()),
        sa.ForeignKeyConstraint(['salon_id'], ['salons.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    
    # Создаем таблицу personal_discounts
    op.create_table('personal_discounts',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('salon_id', sa.Integer(), nullable=False),
        sa.Column('client_phone', sa.String(), nullable=False),
        sa.Column('discount_percent', sa.Float(), nullable=False),
        sa.Column('max_discount_amount', sa.Float(), nullable=True),
        sa.Column('description', sa.Text(), nullable=True),
        sa.Column('is_active', sa.Boolean(), default=True),
        sa.Column('created_at', sa.DateTime(), default=sa.func.now()),
        sa.Column('updated_at', sa.DateTime(), default=sa.func.now(), onupdate=sa.func.now()),
        sa.ForeignKeyConstraint(['salon_id'], ['salons.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    
    # Создаем таблицу applied_discounts
    op.create_table('applied_discounts',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('booking_id', sa.Integer(), nullable=False),
        sa.Column('discount_id', sa.Integer(), nullable=True),
        sa.Column('personal_discount_id', sa.Integer(), nullable=True),
        sa.Column('discount_percent', sa.Float(), nullable=False),
        sa.Column('discount_amount', sa.Float(), nullable=False),
        sa.Column('applied_at', sa.DateTime(), default=sa.func.now()),
        sa.ForeignKeyConstraint(['booking_id'], ['bookings.id'], ),
        sa.ForeignKeyConstraint(['discount_id'], ['loyalty_discounts.id'], ),
        sa.ForeignKeyConstraint(['personal_discount_id'], ['personal_discounts.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    
    # Создаем индексы
    op.create_index('idx_loyalty_discount_salon', 'loyalty_discounts', ['salon_id'], unique=False)
    op.create_index('idx_loyalty_discount_type', 'loyalty_discounts', ['discount_type'], unique=False)
    op.create_index('idx_loyalty_discount_active', 'loyalty_discounts', ['is_active'], unique=False)
    op.create_index('idx_personal_discount_salon', 'personal_discounts', ['salon_id'], unique=False)
    op.create_index('idx_personal_discount_phone', 'personal_discounts', ['client_phone'], unique=False)
    op.create_index('idx_personal_discount_active', 'personal_discounts', ['is_active'], unique=False)
    op.create_index('idx_applied_discount_booking', 'applied_discounts', ['booking_id'], unique=False)
    op.create_index('idx_applied_discount_discount', 'applied_discounts', ['discount_id'], unique=False)
    op.create_index('idx_applied_discount_personal', 'applied_discounts', ['personal_discount_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('idx_applied_discount_personal', table_name='applied_discounts')
    op.drop_index('idx_applied_discount_discount', table_name='applied_discounts')
    op.drop_index('idx_applied_discount_booking', table_name='applied_discounts')
    op.drop_index('idx_personal_discount_active', table_name='personal_discounts')
    op.drop_index('idx_personal_discount_phone', table_name='personal_discounts')
    op.drop_index('idx_personal_discount_salon', table_name='personal_discounts')
    op.drop_index('idx_loyalty_discount_active', table_name='loyalty_discounts')
    op.drop_index('idx_loyalty_discount_type', table_name='loyalty_discounts')
    op.drop_index('idx_loyalty_discount_salon', table_name='loyalty_discounts')
    op.drop_table('applied_discounts')
    op.drop_table('personal_discounts')
    op.drop_table('loyalty_discounts')
    # ### end Alembic commands ### 