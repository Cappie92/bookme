import React, { useState, useEffect } from 'react'
import { XMarkIcon, ClockIcon, ExclamationTriangleIcon } from '@heroicons/react/24/outline'

const PaymentModal = ({ 
  isOpen, 
  onClose, 
  booking, 
  onPaymentComplete,
  onPaymentExpired 
}) => {
  const [timeLeft, setTimeLeft] = useState(0)
  const [isProcessing, setIsProcessing] = useState(false)
  const [paymentMethod, setPaymentMethod] = useState('card')

  useEffect(() => {
    if (!isOpen || !booking) return

    // –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã
    const calculateTimeLeft = () => {
      if (!booking.payment_deadline) return 0
      
      const now = new Date().getTime()
      const deadline = new Date(booking.payment_deadline).getTime()
      const difference = deadline - now
      
      if (difference <= 0) {
        // –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ
        onPaymentExpired?.(booking.id)
        onClose()
        return 0
      }
      
      return Math.floor(difference / 1000) // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
    setTimeLeft(calculateTimeLeft())

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
    const timer = setInterval(() => {
      const remaining = calculateTimeLeft()
      setTimeLeft(remaining)
      
      if (remaining <= 0) {
        clearInterval(timer)
      }
    }, 1000)

    return () => clearInterval(timer)
  }, [isOpen, booking, onPaymentExpired, onClose])

  const formatTime = (seconds) => {
    const minutes = Math.floor(seconds / 60)
    const remainingSeconds = seconds % 60
    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`
  }

  const handlePayment = async () => {
    setIsProcessing(true)
    
    try {
      // –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–ø–ª–∞—Ç—ã
      await new Promise(resolve => setTimeout(resolve, 2000))
      
      // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø–ª–∞—Ç—ã
      console.log('–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ:', {
        bookingId: booking.id,
        amount: booking.payment_amount,
        method: paymentMethod
      })
      
      onPaymentComplete?.(booking.id)
      onClose()
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã:', error)
    } finally {
      setIsProcessing(false)
    }
  }

  const handleClose = () => {
    if (isProcessing) return // –ù–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    onClose()
  }

  if (!isOpen || !booking) return null

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg max-w-md w-full max-h-[90vh] overflow-y-auto">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="flex items-center justify-between p-6 border-b border-gray-200">
          <h2 className="text-xl font-semibold text-gray-900">
            üí≥ –û–ø–ª–∞—Ç–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
          </h2>
          <button
            onClick={handleClose}
            disabled={isProcessing}
            className="text-gray-400 hover:text-gray-600 disabled:opacity-50"
          >
            <XMarkIcon className="h-6 w-6" />
          </button>
        </div>

        {/* –°–æ–¥–µ—Ä–∂–∏–º–æ–µ */}
        <div className="p-6 space-y-6">
          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ */}
          <div className="bg-gray-50 rounded-lg p-4">
            <h3 className="font-medium text-gray-900 mb-2">–î–µ—Ç–∞–ª–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</h3>
            <div className="space-y-2 text-sm text-gray-600">
              <div>–£—Å–ª—É–≥–∞: <span className="font-medium">{booking.service_name}</span></div>
              <div>–î–∞—Ç–∞: <span className="font-medium">{new Date(booking.start_time).toLocaleDateString('ru-RU')}</span></div>
              <div>–í—Ä–µ–º—è: <span className="font-medium">{new Date(booking.start_time).toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })}</span></div>
              <div>–ú–∞—Å—Ç–µ—Ä: <span className="font-medium">{booking.master_name}</span></div>
            </div>
          </div>

          {/* –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ */}
          <div className="text-center">
            <div className="text-3xl font-bold text-green-600">
              {booking.payment_amount} ‚ÇΩ
            </div>
            <p className="text-sm text-gray-600 mt-1">–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ</p>
          </div>

          {/* –¢–∞–π–º–µ—Ä */}
          <div className="bg-red-50 border border-red-200 rounded-lg p-4">
            <div className="flex items-center justify-center space-x-2">
              <ClockIcon className="h-5 w-5 text-red-600" />
              <span className="text-sm font-medium text-red-800">
                –í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É: {formatTime(timeLeft)}
              </span>
            </div>
            {timeLeft <= 300 && ( // 5 –º–∏–Ω—É—Ç
              <div className="mt-2 text-center">
                <ExclamationTriangleIcon className="h-4 w-4 text-red-600 inline mr-1" />
                <span className="text-xs text-red-600">
                  –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–∞–µ—Ç! –£—Å–ø–µ–π—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
                </span>
              </div>
            )}
          </div>

          {/* –í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-3">
              –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
            </label>
            <div className="space-y-2">
              <label className="flex items-center space-x-3 cursor-pointer">
                <input
                  type="radio"
                  name="payment_method"
                  value="card"
                  checked={paymentMethod === 'card'}
                  onChange={(e) => setPaymentMethod(e.target.value)}
                  className="w-4 h-4 text-blue-600 border-gray-300 focus:ring-blue-500"
                />
                <span className="text-sm text-gray-700">üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞</span>
              </label>
              <label className="flex items-center space-x-3 cursor-pointer">
                <input
                  type="radio"
                  name="payment_method"
                  value="sbp"
                  checked={paymentMethod === 'sbp'}
                  onChange={(e) => setPaymentMethod(e.target.value)}
                  className="w-4 h-4 text-blue-600 border-gray-300 focus:ring-blue-500"
                />
                <span className="text-sm text-gray-700">üì± –°–ë–ü (–°–∏—Å—Ç–µ–º–∞ –±—ã—Å—Ç—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π)</span>
              </label>
            </div>
          </div>

          {/* –ö–Ω–æ–ø–∫–∞ –æ–ø–ª–∞—Ç—ã */}
          <button
            onClick={handlePayment}
            disabled={isProcessing || timeLeft <= 0}
            className="w-full bg-blue-600 text-white py-3 px-4 rounded-lg font-medium hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors"
          >
            {isProcessing ? (
              <div className="flex items-center justify-center space-x-2">
                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                <span>–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã...</span>
              </div>
            ) : (
              `–û–ø–ª–∞—Ç–∏—Ç—å ${booking.payment_amount} ‚ÇΩ`
            )}
          </button>

          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
          <div className="text-center text-xs text-gray-500">
            <p>–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±—É–¥–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</p>
            <p className="mt-1">–í —Å–ª—É—á–∞–µ –ø—Ä–æ–±–ª–µ–º —Å –æ–ø–ª–∞—Ç–æ–π –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É</p>
          </div>
        </div>
      </div>
    </div>
  )
}

export default PaymentModal
