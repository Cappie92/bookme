import React, { useState, useEffect } from 'react'

export default function SalonSidebar({ activeTab, setActiveTab }) {
  const [subscription, setSubscription] = useState(null)
  const [loading, setLoading] = useState(true)

  const getAuthHeaders = () => {
    const token = localStorage.getItem('access_token')
    return {
      'Authorization': `Bearer ${token}`,
      'Content-Type': 'application/json'
    }
  }

  const loadSubscription = async () => {
    try {
      const response = await fetch('/api/balance/subscription-status', {
        headers: getAuthHeaders()
      })
      if (response.ok) {
        const subscriptionData = await response.json()
        setSubscription(subscriptionData)
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏:', error)
    } finally {
      setLoading(false)
    }
  }

  useEffect(() => {
    loadSubscription()
  }, [])

  // –ë–∞–∑–æ–≤—ã–µ –ø—É–Ω–∫—Ç—ã –º–µ–Ω—é
  const baseMenuItems = [
    { id: 'dashboard', label: '–î–∞—à–±–æ—Ä–¥', icon: 'üìä' },
    { id: 'masters', label: '–ú–∞—Å—Ç–µ—Ä–∞', icon: 'üßë‚Äçüé§' },
    { id: 'analytics', label: '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞', icon: 'üìà' },
    { id: 'places', label: '–ú–µ—Å—Ç–∞', icon: 'ü™ë' },
    { id: 'schedule', label: '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', icon: 'üìÖ' },
    { id: 'services', label: '–£—Å–ª—É–≥–∏', icon: '‚úÇÔ∏è' },
    { id: 'loyalty', label: '–õ–æ—è–ª—å–Ω–æ—Å—Ç—å', icon: 'üéÅ' },
    { id: 'tariff', label: '–ú–æ–π —Ç–∞—Ä–∏—Ñ', icon: 'üí≥' },
    { id: 'salon', label: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∞–ª–æ–Ω–æ–º', icon: '‚öôÔ∏è' },
    { id: 'restrictions', label: '–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è', icon: 'üö´' },
    { id: 'accounting', label: '–ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è', icon: 'üí∞' }
  ]

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤–∫–ª–∞–¥–∫—É —Ñ–∏–ª–∏–∞–ª–æ–≤
  const canShowBranches = subscription?.max_branches >= 2

  // –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–µ–Ω—é
  const menuItems = [
    ...baseMenuItems.slice(0, 1), // –î–∞—à–±–æ—Ä–¥
    ...(canShowBranches ? [{ id: 'branches', label: '–§–∏–ª–∏–∞–ª—ã', icon: 'üè¢' }] : []),
    ...baseMenuItems.slice(1) // –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø—É–Ω–∫—Ç—ã
  ]

  return (
    <aside className="w-64 bg-gray-100 p-4 min-h-screen pt-[140px] fixed left-0 top-0">
      <nav className="flex flex-col gap-2">
        {menuItems.map(item => (
          <button
            key={item.id}
            onClick={() => setActiveTab(item.id)}
            className={`text-left px-4 py-3 rounded-lg font-medium transition-colors flex items-center gap-3 ${
              activeTab === item.id
                ? 'bg-[#4CAF50] text-white shadow-md'
                : 'bg-white text-gray-700 hover:bg-gray-50 hover:shadow-sm'
            }`}
          >
            <span className="text-lg">{item.icon}</span>
            {item.label}
          </button>
        ))}
      </nav>
    </aside>
  )
} 