#!/usr/bin/env python3
"""
–¢–µ—Å—Ç API –Ø–Ω–¥–µ–∫—Å.–ì–µ–æ–∫–æ–¥–µ—Ä–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º –∫–ª—é—á–æ–º
"""

import requests
from urllib.parse import quote

# –ë–∞–∑–æ–≤—ã–µ URL API
API_BASE = "http://localhost:8001/api/geocoder"

def test_reverse_geocode():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ–µ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    print("üß™ –¢–µ—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è")
    print("-" * 40)
    
    # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–µ–Ω—Ç—Ä–∞ –ú–æ—Å–∫–≤—ã
    lon, lat = 37.617635, 55.755814
    
    try:
        response = requests.get(f"{API_BASE}/reverse-geocode?lon={lon}&lat={lat}")
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        print(f"–û—Ç–≤–µ—Ç: {response.text}")
        
        if response.status_code == 200:
            data = response.json()
            if data.get("success"):
                print(f"‚úÖ –£–°–ü–ï–•: {data['address']}")
            else:
                print(f"‚ùå –û–®–ò–ë–ö–ê: {data.get('detail', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        else:
            print(f"‚ùå HTTP {response.status_code}: {response.text}")
            
    except Exception as e:
        print(f"üí• –û–®–ò–ë–ö–ê: {str(e)}")

def test_extract_address_from_url():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –∏–∑ —Å—Å—ã–ª–∫–∏"""
    print("\nüß™ –¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –∏–∑ —Å—Å—ã–ª–∫–∏")
    print("-" * 40)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏
    test_urls = [
        "https://yandex.ru/maps/213/moscow/?text=—É–ª–∏—Ü–∞%20–¢–≤–µ—Ä—Å–∫–∞—è%2C%201",
        "https://yandex.ru/maps/213/moscow/?ll=37.617635,55.755814",
        "https://yandex.ru/maps/213/moscow/—É–ª–∏—Ü–∞%20–¢–≤–µ—Ä—Å–∫–∞—è%2C%201",
    ]
    
    for i, url in enumerate(test_urls, 1):
        print(f"\nüìù –¢–µ—Å—Ç {i}: {url}")
        print("-" * 30)
        
        try:
            response = requests.get(f"{API_BASE}/extract-address-from-url?url={quote(url)}")
            print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç: {response.text}")
            
            if response.status_code == 200:
                data = response.json()
                if data.get("success"):
                    print(f"‚úÖ –£–°–ü–ï–•: {data['address']}")
                else:
                    print(f"‚ùå –û–®–ò–ë–ö–ê: {data.get('detail', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            else:
                print(f"‚ùå HTTP {response.status_code}: {response.text}")
                
        except Exception as e:
            print(f"üí• –û–®–ò–ë–ö–ê: {str(e)}")

def test_geocode_address():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞"""
    print("\nüß™ –¢–µ—Å—Ç –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞")
    print("-" * 40)
    
    address = "—É–ª–∏—Ü–∞ –¢–≤–µ—Ä—Å–∫–∞—è, 1"
    
    try:
        response = requests.get(f"{API_BASE}/geocode?address={quote(address)}")
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        print(f"–û—Ç–≤–µ—Ç: {response.text}")
        
        if response.status_code == 200:
            data = response.json()
            if data.get("success"):
                print(f"‚úÖ –£–°–ü–ï–•: {data['address']}")
                print(f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {data['coordinates']}")
            else:
                print(f"‚ùå –û–®–ò–ë–ö–ê: {data.get('detail', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        else:
            print(f"‚ùå HTTP {response.status_code}: {response.text}")
            
    except Exception as e:
        print(f"üí• –û–®–ò–ë–ö–ê: {str(e)}")

if __name__ == "__main__":
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –Ø–Ω–¥–µ–∫—Å.–ì–µ–æ–∫–æ–¥–µ—Ä–∞")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å API
    try:
        response = requests.get("http://localhost:8001/")
        if response.status_code == 200:
            print("‚úÖ API —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print(f"‚ùå API —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
            exit(1)
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API: {e}")
        print("\n‚ö†Ô∏è  –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω:")
        print("   cd backend && python3 -m uvicorn main:app --host 0.0.0.0 --port 8001 --reload")
        exit(1)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    test_reverse_geocode()
    test_extract_address_from_url()
    test_geocode_address()
    
    print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!") 